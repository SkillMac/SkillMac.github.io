<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>linux升级gcc</title>
      <link href="//posts/f62a7c7d/"/>
      <url>//posts/f62a7c7d/</url>
      <content type="html"><![CDATA[<p>这一篇是对linux centos7 中 gcc 的升级.<br>这次升级gcc的版本是 8.1.0<br><a id="more"></a></p><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a><strong>方法一</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ su \\进入 root</span><br><span class="line"># sudo yum install libmpc-devel mpfr-devel gmp-devel</span><br><span class="line">...</span><br><span class="line"># cd 下载</span><br><span class="line"># curl ftp://ftp.mirrorservice.org/sites/sourceware.org/pub/gcc/releases/*   \\* 号为自己想要更新的版本号</span><br><span class="line">\\ 做法是自己将这个 地址放到浏览器中自己去选取合适的版本直接下载.</span><br><span class="line">\\ 我这里下载的是 8.1.0 </span><br><span class="line"># tar zxfv gcc-8.1.0.tar.gz</span><br><span class="line"># cd gcc-8.1.0</span><br><span class="line"># ./configure --disable-multilib --enable-languages=c,c++</span><br><span class="line"># make -j 4</span><br><span class="line">...</span><br><span class="line"># make install</span><br><span class="line">...</span><br><span class="line"># gcc -v</span><br><span class="line">...</span><br><span class="line">线程模式:posix</span><br><span class="line">gcc 版本 8.1.0(GCC)</span><br><span class="line">\\ ... 意思省略</span><br></pre></td></tr></table></figure><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a><strong>方法二</strong></h2><p>在 etc/yum.repos.d下面添加repo<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch FedoraRepo.repo</span><br></pre></td></tr></table></figure></p><p>然后添加下面的内容:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[warning:fedora] </span><br><span class="line">name=fedora </span><br><span class="line">mirrorlist=http://mirrors.fedoraproject.org/mirrorlist?repo=fedora-23&amp;arch=$basearch </span><br><span class="line">enabled=1 </span><br><span class="line">gpgcheck=1 </span><br><span class="line">gpgkey=https://getfedora.org/static/34EC9CBA.txt</span><br></pre></td></tr></table></figure><p>然后更新gcc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y update gcc gcc-c++</span><br></pre></td></tr></table></figure><p>然后就是新版本了<br>但是这我还不太懂.所以就没有用这个方法.</p><blockquote><p>我用的是方法一.<br>因为方法一可以自己选择gcc版本,并不是所有的东西都要更新到最新的版本,当然这个根据你们自己了.<br>根据情况而定. 方法二更简单一点.</p></blockquote><p>好了今天就先到这了.</p>]]></content>
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gcc </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>9宫格纹理的更新问题</title>
      <link href="//posts/1e09c0f5/"/>
      <url>//posts/1e09c0f5/</url>
      <content type="html"><![CDATA[<p>这一篇文章主要是讲解一下 cocos2dx 9宫格纹理更新问题<br><a id="more"></a><br>我这里就不说 cocos2dx 9宫格怎么使用了。在网上一搜一大堆。基本内容都是那样。我不想做无谓的叙述了。</p><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><p>现在的环境是：<br>    cocos2dx 3.15<br>    VS 2015<br>    使用 lua 写项目</p><blockquote><p>注意这里是说使用 plist 里面的纹理 也就是精灵帧</p></blockquote><p>现在面临的问题是: cocos2dx 对9宫格纹理更新，不能像更新精灵那样使用它提供的函数 <code>setSpriteFrame</code><br>虽然9宫格就是对精灵的在次封装。 </p><p>cocos2dx 九宫格的这个函数（setSpriteFrame）在C++定义的头文件中是长这样的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// UIScale9Sprite.h</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">setSpriteFrame</span><span class="params">(SpriteFrame * spriteFrame, <span class="keyword">const</span> Rect&amp; capInsets)</span></span>;</span><br><span class="line"><span class="comment">//它没有提供直接输入字符串来实现纹理的更换.</span></span><br></pre></td></tr></table></figure><p>这说明我们需要一个精灵帧类型，但是这个类型我用了这么时间，基本没用过。</p><h2 id="问题剖析"><a href="#问题剖析" class="headerlink" title="问题剖析"></a><strong>问题剖析</strong></h2><p>我上面有说过九宫格是对纹理的再次封装实现的，说以就去查看他的父类<code>Sprite.h</code>这个是怎么初始化的。</p><p>追了 它父类的初始化函数 <code>Sprite.h</code> 看到了它是怎么创建出精灵帧的，下面是他初始化它内部的精灵帧的操作。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> Sprite::setSpriteFrame(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;spriteFrameName)</span><br><span class="line">&#123;</span><br><span class="line">    CCASSERT(!spriteFrameName.empty(), <span class="string">"spriteFrameName must not be empty"</span>);</span><br><span class="line">    <span class="keyword">if</span> (spriteFrameName.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    SpriteFrameCache *cache = SpriteFrameCache::getInstance();</span><br><span class="line">    <span class="comment">// 根据名字在精灵帧缓存中查找相应的精灵帧。</span></span><br><span class="line">    SpriteFrame *spriteFrame = cache-&gt;getSpriteFrameByName(spriteFrameName);</span><br><span class="line"></span><br><span class="line">    CCASSERT(spriteFrame, <span class="built_in">std</span>::<span class="built_in">string</span>(<span class="string">"Invalid spriteFrameName :"</span>).append(spriteFrameName).c_str());</span><br><span class="line">    <span class="comment">// 设置自己内部的精灵帧对象</span></span><br><span class="line">    setSpriteFrame(spriteFrame);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>原理是在精灵帧缓存中查找对象<br>设置精灵的精灵帧</p></blockquote><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a><strong>代码实现</strong></h2><p>这下就好办了。</p><p>lua层的代码就是</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> spriteFrameCache = cc.SpriteFrameCache:getInstance()</span><br><span class="line"><span class="keyword">local</span> frame = spriteFrameCache:getSpriteFrame(<span class="string">"xxx.png"</span>)</span><br><span class="line"><span class="comment">-- xxx.png 就是你 plist文件中对应的文件名字。</span></span><br><span class="line"><span class="comment">-- 这个就是我们需要的精灵帧对象</span></span><br><span class="line"><span class="comment">-- 然后在调用它的 setSpriteFrame</span></span><br></pre></td></tr></table></figure><p>具体的实现代码lua层的<br>c++层我就不说了。暂时没有用到。做法都一样。<br>上面的实现在 cocos2dx display的lua文件里面有实现。所以就直接调用。<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- desc: 创建9宫格图片</span></span><br><span class="line"><span class="comment">-- params [ path | pos | capInsets | size | rect ]</span></span><br><span class="line"><span class="comment">-- params.path 可以是精灵帧 ej: params.path = "#xxx.png"</span></span><br><span class="line"><span class="comment">-- params.pos 精灵的位置</span></span><br><span class="line"><span class="comment">-- params.capInsets 是9宫格中间 Rect 的位置和大小</span></span><br><span class="line"><span class="comment">-- params.rect 可以不用填</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">T.cp_s9</span><span class="params">( parentNode, params )</span></span></span><br><span class="line">    <span class="keyword">local</span> pos = params.pos</span><br><span class="line">    <span class="keyword">local</span> s   = display.newSprite(params.<span class="built_in">path</span>,pos.x,pos.y,params)</span><br><span class="line">    <span class="keyword">local</span> _   = parentNode <span class="keyword">and</span> parentNode:addChild(s)</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- desc: 9宫格图片纹理的更新</span></span><br><span class="line"><span class="comment">-- path 无效添加报错机制</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">T.update_s9</span><span class="params">( node, path, capInsets, size )</span></span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">string</span>.<span class="built_in">byte</span>(<span class="built_in">path</span>) == <span class="number">35</span> <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">local</span> sp = display.newSpriteFrame(<span class="built_in">path</span>)</span><br><span class="line">        node:setSpriteFrame(sp,capInsets)</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> cc.FileUtils:getInstance():isFileExist(<span class="built_in">path</span>) <span class="keyword">then</span></span><br><span class="line">            <span class="built_in">error</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">"invalid path , file isn't exist , path - %s"</span>,<span class="built_in">path</span>))</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        node:setTexture(<span class="built_in">path</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    node:setContentSize(size)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><blockquote><p>需要注意的一点就是在九宫格更新纹理后尺寸又变回原来的大小，你需要重新设置大小。</p></blockquote>]]></content>
      
      <categories>
          
          <category> cocos2dx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cocos2dx </tag>
            
            <tag> 9宫格 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>python-闭包问题</title>
      <link href="//posts/87435431/"/>
      <url>//posts/87435431/</url>
      <content type="html"><![CDATA[<p>本文主要是python闭包问题的记录。<br><a id="more"></a><br>python 实现的有内部函数，那么自然就会使用内部函数外面的变量 。</p><blockquote><p>注意这里是要改变局部变量 可以使用下面的策略，如果只是简单的引用，可以直接引用 不用使用 <code>nonlocal</code> 关键字</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">A</span><span class="params">()</span>:</span></span><br><span class="line">    xxx = <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">B</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="comment">#这个时候你可能会使用xxx变量。  直接引用是会报错的</span></span><br><span class="line">        <span class="comment">#告诉你使用了没有分配的引用   referenced before assignment</span></span><br><span class="line">        <span class="keyword">nonlocal</span> xxx</span><br><span class="line">        xxx += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> xxx</span><br><span class="line">    <span class="keyword">return</span> B</span><br><span class="line">f = A()</span><br><span class="line">print(f(),f(),f())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出  1 2 3</span></span><br></pre></td></tr></table></figure><p>这里主要是使用了python 内部的关键字 <code>nonlocal</code><br>主要是引用内部函数以外的局部变量  注意这里不是全局变量。 </p><blockquote><p>注意这个关键字是python3.x 中可以出现的关键字。在python2.x中会报错。<br>在python2.x的版本中可以使用 list 封装一层，实现使用内部函数以外的局部变量。<br>这里不能使用 元祖 因为元祖的变量时不可变的。</p></blockquote><hr><p>如果要引用全局变量要是用python的另外一个关键字 global。<br>用法和上面相同。   使用例子如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">xxx = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">A</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">B</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="comment">#这个时候你可能会使用xxx变量。  直接引用是会报错的</span></span><br><span class="line">        <span class="comment">#告诉你使用了没有分配的引用   referenced before assignment</span></span><br><span class="line">        <span class="keyword">global</span> xxx</span><br><span class="line">        xxx += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> xxx</span><br><span class="line">    <span class="keyword">return</span> B</span><br><span class="line">f = A()</span><br><span class="line">print(f(),f(),f())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出  1 2 3</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 闭包 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>记录使用hexo写博客的问题</title>
      <link href="//posts/a9ff66a6/"/>
      <url>//posts/a9ff66a6/</url>
      <content type="html"><![CDATA[<p>在使用 hexo 总会遇到这种那种的错误我这里就记录一下,希望后面使用 hexo 写博客的人能少遇到一点麻烦，少走一点弯路，OK，废话不多说。</p><a id="more"></a><h1 id="1-Hexo-TypeError-Cannot-set-property-‘lastIndex’-of-undefined"><a href="#1-Hexo-TypeError-Cannot-set-property-‘lastIndex’-of-undefined" class="headerlink" title="1. Hexo: TypeError: Cannot set property ‘lastIndex’ of undefined"></a>1. Hexo: TypeError: Cannot set property ‘lastIndex’ of undefined</h1><pre><code>解决方案是 将你工程下的 _config.yml (这个不是主题的_config.yml) 文件里面的 `auto_detect` 设置为 false.</code></pre><h1 id="2-hexo-skip-render-的使用"><a href="#2-hexo-skip-render-的使用" class="headerlink" title="2. hexo skip_render 的使用"></a>2. hexo skip_render 的使用</h1><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">skip_render:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">'dir/**'</span> <span class="comment"># 忽略dir这目录下的所有文件，不进行渲染</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">'xx/**'</span>  <span class="comment"># 道理同上。</span></span><br></pre></td></tr></table></figure><h1 id="3-修改完-hexo-目录下的-config-yml-文件-重新-generate-文件不生效"><a href="#3-修改完-hexo-目录下的-config-yml-文件-重新-generate-文件不生效" class="headerlink" title="3. 修改完 hexo 目录下的 _config.yml 文件 重新 generate 文件不生效"></a>3. 修改完 hexo 目录下的 _config.yml 文件 重新 generate 文件不生效</h1><pre><code>使用 hexo 的命令 `hexo clean`,每次记得使用这个命令清除一下</code></pre>]]></content>
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>python_optionparser模块</title>
      <link href="//posts/ce1d3b12/"/>
      <url>//posts/ce1d3b12/</url>
      <content type="html"><![CDATA[<p>本文主要是 python 对命令行的处理模块 就象是这样的<br><img src="/posts/ce1d3b12/1.png" title="show optionParser result}<br><a id="more"></a><br>第一步: 导入模块 </p> <figure class=highlight python><table><tr><td class=gutter><pre><span class=line>1</span><br></pre></td><td class=code><pre><span class=line><span class=keyword>from</span> optparse <span class=keyword>import</span> OptionParser</span><br></pre></td></tr></table></figure> <p>第二步: 构建对象</p> <figure class=highlight python><table><tr><td class=gutter><pre><span class=line>1</span><br><span class=line>2</span><br><span class=line>3</span><br><span class=line>4</span><br><span class=line>5</span><br><span class=line>6</span><br><span class=line>7</span><br><span class=line>8</span><br><span class=line>9</span><br><span class=line>10</span><br><span class=line>11</span><br></pre></td><td class=code><pre><span class=line>parser = OptionParser(usage:<span class=string>usage: %prog -t theme</span>)</span><br><span class=line><span class=comment># 里面是构建程序的相关信息.</span></span><br><span class=line><span class=comment>#当然你也可以这样写:</span></span><br><span class=line>parser = OptionParser(usage=<span class=string>%prog -t theme</span>, version=<span class=string>%prog 1.0</span>)</span><br><span class=line><span class=comment>## 直接输入 --version</span></span><br><span class=line><span class=comment>## 打印 你程序名字 + 版本号</span></span><br><span class=line>&gt; -----------------------------------------</span><br><span class=line>λ python sortFilebySize.py --version</span><br><span class=line> sortFilebySize.py <span class=number>1.0</span></span><br><span class=line>&gt; -----------------------------------------</span><br><span class=line><span class=comment>##这里面 %prog 被直接替换成 你程序的名字 其实就是替换成 os.path.basename.(sys.argv[0]).</span></span><br></pre></td></tr></table></figure> <p>这个模块主要是对这个函数 <code>add_option</code>的使用</p> <p>第三步: 解析 add_option 函数</p> <figure class=highlight python><table><tr><td class=gutter><pre><span class=line>1</span><br><span class=line>2</span><br><span class=line>3</span><br><span class=line>4</span><br><span class=line>5</span><br><span class=line>6</span><br><span class=line>7</span><br><span class=line>8</span><br></pre></td><td class=code><pre><span class=line>parser.add_option(<span class=string>-v</span>,<span class=string>--version</span>,</span><br><span class=line> action=<span class=string>store</span>,</span><br><span class=line> dest=<span class=string>m_version</span>,</span><br><span class=line> type=<span class=string>string</span>,</span><br><span class=line> default=<span class=string>1.0.0</span>,</span><br><span class=line> metavar=<span class=string>version</span>,</span><br><span class=line> help=<span class=string>show cur version</span>)</span><br><span class=line><span class=comment># help 的帮助 信息里面 是可以使用 %default 传递一个默认值</span></span><br></pre></td></tr></table></figure> <blockquote> <p>1-2:前两个是你要提示的参数,长短参数.<br>action:acton 有几个值 <code>store</code> <code>store_true</code> <code>store_false</code> <code>store_const</code> <code>append</code> <code>count</code> <code>callback</code><br>如果没有指定 dest 参数，将用命令行的参数名来对 options 对象的值进行存取。<br>store 也有其它的两种形式： store_true 和 store_false ，用于处理带命令行参数后面不 带值的情况。</p> </blockquote> <figure class=highlight python><table><tr><td class=gutter><pre><span class=line>1</span><br><span class=line>2</span><br><span class=line>3</span><br><span class=line>4</span><br></pre></td><td class=code><pre><span class=line>parser.add_option(<span class=string>-v</span>, action=<span class=string>store_true</span>, dest=<span class=string>m_version</span>)</span><br><span class=line><span class=comment># 这时候你拿到的值默认会置为True</span></span><br><span class=line>parser.add_option(<span class=string>-v</span>, action=<span class=string>store_false</span>, dest=<span class=string>m_version</span>)</span><br><span class=line><span class=comment># 这时候你拿到的值默认会置为False</span></span><br></pre></td></tr></table></figure> <blockquote> <p>dest:设置对象存储这个值的变量名</p> </blockquote> <figure class=highlight python><table><tr><td class=gutter><pre><span class=line>1</span><br><span class=line>2</span><br><span class=line>3</span><br><span class=line>4</span><br><span class=line>5</span><br><span class=line>6</span><br><span class=line>7</span><br></pre></td><td class=code><pre><span class=line>parser.add_option(<span class=string>-v</span>, action=<span class=string>store_true</span>, dest=<span class=string>m_version</span>)</span><br><span class=line>(options, args) = parser.parse_args()</span><br><span class=line>print(options.m_version)</span><br><span class=line>&gt; -----------------------------------------</span><br><span class=line>&gt; λ python sortFilebySize.py -v</span><br><span class=line>&gt; <span class=keyword>True</span></span><br><span class=line>&gt; -----------------------------------------</span><br></pre></td></tr></table></figure> <blockquote> <p>type:指定变量的类型<br>你也可以指定 add_option() 方法中 type 参数为其它值，如 int 或者 float 等等.</p> <p>default:设置这个变量的默认值. 也可以使用这个函数设置 set_defaults()</p> </blockquote> <figure class=highlight python><table><tr><td class=gutter><pre><span class=line>1</span><br></pre></td><td class=code><pre><span class=line>parser.set_defaults(m_version=<span class=string>1.0.0</span>)</span><br></pre></td></tr></table></figure> <blockquote> <p>metavar: 设置 add_option 方法中的 metavar 参数，有助于提醒用户，该命令行参数所期待的参数，如 metavar=”version”：</p> </blockquote> <p><code>注意： metavar 参数中的字符串会自动变为大写。</code></p> <figure class=highlight python><table><tr><td class=gutter><pre><span class=line>1</span><br><span class=line>2</span><br><span class=line>3</span><br><span class=line>4</span><br><span class=line>5</span><br><span class=line>6</span><br></pre></td><td class=code><pre><span class=line>&gt; -----------------------------------------</span><br><span class=line>&gt; λ python sortFilebySize.py -h</span><br><span class=line>&gt; Usage: sortFilebySize.py -t theme</span><br><span class=line>&gt; Options:</span><br><span class=line>&gt; <span class=comment># -v VERSION, --version=VERSION show program" alt="s version number and exit</span></span><br><span class=line>&gt; -----------------------------------------</span><br></pre></td></tr></table></figure> <blockquote> <p>help:用于显示的提示信息</p> </blockquote> <p>如果程序有很多的命令行参数，你可能想为他们进行分组，这时可以使用 OptonGroup:进行分组</p> <figure class=highlight python><table><tr><td class=gutter><pre><span class=line>1</span><br><span class=line>2</span><br><span class=line>3</span><br><span class=line>4</span><br><span class=line>5</span><br><span class=line>6</span><br></pre></td><td class=code><pre><span class=line><span class=keyword>from</span> optparse <span class=keyword>import</span> OptionGroup</span><br><span class=line>group = OptionGroup(parser, <span class=string>Custom Group Options</span>, </span><br><span class=line> <span class=string>Custom Group show message</span></span><br><span class=line> <span class=string>use Custom Group</span>)</span><br><span class=line>group.add_option(<span class=string>-t</span>,action=<span class=string>store</span>,help=<span class=string>Group options</span>)</span><br><span class=line>parser.add_option_group(group)</span><br></pre></td></tr></table></figure> <h2 id=处理异常><a href=#处理异常 class=headerlink title=处理异常:></a><strong>处理异常:</strong></h2><blockquote> <p>指因用户输入无效的、不完整的命令行参数而引发的异常.</p> </blockquote> <figure class=highlight python><table><tr><td class=gutter><pre><span class=line>1</span><br><span class=line>2</span><br><span class=line>3</span><br><span class=line>4</span><br></pre></td><td class=code><pre><span class=line>[-]</span><br><span class=line>(options, args) = parser.parse_args() </span><br><span class=line><span class=keyword>if</span> options.a <span class=keyword>and</span> options.b:</span><br><span class=line> parser.error(<span class=string>options -a and -b invalid</span>)</span><br></pre></td></tr></table></figure> <p>完整的程序例子</p> <figure class=highlight python><table><tr><td class=gutter><pre><span class=line>1</span><br><span class=line>2</span><br><span class=line>3</span><br><span class=line>4</span><br><span class=line>5</span><br><span class=line>6</span><br><span class=line>7</span><br><span class=line>8</span><br><span class=line>9</span><br><span class=line>10</span><br><span class=line>11</span><br><span class=line>12</span><br><span class=line>13</span><br><span class=line>14</span><br><span class=line>15</span><br><span class=line>16</span><br></pre></td><td class=code><pre><span class=line><span class=comment>#! python2</span></span><br><span class=line><span class=comment># coding: utf-8</span></span><br><span class=line><span class=keyword>from</span> optparse <span class=keyword>import</span> OptionParser</span><br><span class=line><span class=keyword>from</span> optparse <span class=keyword>import</span> OptionGroup</span><br><span class=line><span class=function><span class=keyword>def</span> <span class=title>main</span><span class=params>()</span>:</span></span><br><span class=line> parser = OptionParser(usage=<span class=string>usage: %prog -t theme</span>,version=<span class=string>%prog 1.0</span>)</span><br><span class=line> parser.add_option(<span class=string>-v</span>, action=<span class=string>store_true</span>, dest=<span class=string>m_version</span>)</span><br><span class=line> group = OptionGroup(parser, <span class=string>Custom Group Options</span>, </span><br><span class=line> <span class=string>Custom Group show message</span></span><br><span class=line> <span class=string>use Custom Group</span>)</span><br><span class=line> group.add_option(<span class=string>-t</span>,action=<span class=string>store</span>,help=<span class=string>Group options</span>)</span><br><span class=line> parser.add_option_group(group)</span><br><span class=line> (options, args) = parser.parse_args()</span><br><span class=line> <span class=keyword>if</span> options.m_version:</span><br><span class=line> parser.error(<span class=string>options m_version invalid</span>)</span><br><span class=line> <span class=comment># ...</span></span><br></pre></td></tr></table></figure>">]]></content>
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> optionParser </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>优化cocos2dxSpine库</title>
      <link href="//posts/c4c0a180/"/>
      <url>//posts/c4c0a180/</url>
      <content type="html"><![CDATA[<h1 id="对cocos2dxSpine库的升级和优化"><a href="#对cocos2dxSpine库的升级和优化" class="headerlink" title="对cocos2dxSpine库的升级和优化"></a><strong>对cocos2dxSpine库的升级和优化</strong></h1><h3 id="本文的大纲"><a href="#本文的大纲" class="headerlink" title="本文的大纲"></a><strong>本文的大纲</strong></h3><p>1.升级spine在cocos2dx-3.15的运行时库<br>2.优化spine在创建的时候效率</p><p>在开发的时候出现的问题<br>1.spine这个软件导出3.6新加的特效在cocos2dx3.15 不能使用<br>2.spine在批量创建的时候帧数会下降<br><a id="more"></a></p><h3 id="升级spine-gt-3-6"><a href="#升级spine-gt-3-6" class="headerlink" title="升级spine -&gt;3.6"></a><strong>升级spine -&gt;3.6</strong></h3><p><a href="https://github.com/EsotericSoftware/spine-runtimes">spine code github 地址</a><br>去这个地址clone或者是下载Zip这个你随便<br>然后会产现这个目录<br><!-- ![]() --><br><img src="/posts/c4c0a180/spine-code_1.png" title="spine的目录"><br>主要就是我使用箭头标记的这两个目录</p><pre><code>spine-c/spine-c/include/spine/*.hspine-c/spine-c/src/spine/*.cspine-cocos2dx/src/spine/*.cpp  and  spine-cocos2dx/src/spine/*.h</code></pre><p>找到自己的工程的根目录 然后去找这个目录<br>全部放在 <code>···/frameworks/cocos2d-x/cocos/editor-support/spine</code></p><p>直接全部替换<br>然后打开自己的VS去编译记住一点将你添加的C或C++的文件给添加到libSpine的工程中的源文件中</p><img src="/posts/c4c0a180/libSpine_1.png" title="添加到libSpine的工程中去"><p>选中 Source Files 执行 <code>Shift + Alt + A</code> 添加现有项  或者是鼠标右键添加好可以</p><p>然后编译,你会惊奇的发现编译成功了,但是不要高兴的太早了,因为这个在编译Android的时候会报错,当然原因也很简单，接着往下面看。</p><p><strong>在Android中的实现</strong><br>你找到 这个目录里面会有 <code>···/frameworks/cocos2d-x/cocos/editor-support/spine</code><br><code>Android.mk</code>的文件<br>将你添加的写在这个配置里面 注意只写 *.h 的文件<br>然后使用 Android Studio 编译 Apk, 这里你也可以使用NDK编译,但是在Android2.？这个不记得了,就已经不在支持NDK编译了<br>所以还是使用Android Studio 吧</p><p>在 ios 中的实现也是同样如此，这里就不再讲述了</p><h3 id="优化spine在创建的时候效率"><a href="#优化spine在创建的时候效率" class="headerlink" title="优化spine在创建的时候效率"></a><strong>优化spine在创建的时候效率</strong></h3><p>在原先的 spine 创建的时候每次都需要解析数据,生成骷髅数据,其实这个是很消耗CPU的,导致FPS下降。<br>我的做法是保留 spine create 的原有接口,自己再从新写一个新的接口。<br>原理：创建字典<map>保留骷髅数据每次创建的时候询问这个 Map 是否存在 key 没有创建,有直接使用。</p><p>代码的写法有很多种,我这只是参考</p><p>在SkeletonAnimation.cpp 中添加如下代码<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">SkeletonAnimation* SkeletonAnimation::createFromCache(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; key_skeletonData)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (spSkeletonData* skeleton_data = SkeletonAnimation::getSkeletonDataFromCache(key_skeletonData))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> SkeletonAnimation::createWithData(skeleton_data, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        skeleton_data = SkeletonAnimation::loadSkeletonDataToCache(key_skeletonData, key_skeletonData + <span class="string">".json"</span>, key_skeletonData + <span class="string">".atlas"</span>);</span><br><span class="line">        <span class="keyword">if</span> (skeleton_data) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> SkeletonAnimation::createWithData(skeleton_data, <span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line">spSkeletonData* SkeletonAnimation::loadSkeletonDataToCache(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; key_skeletonData, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; skeletonJsonFile, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; atlasFile, <span class="keyword">float</span> scale)</span><br><span class="line">&#123;</span><br><span class="line">    iteratorSkeletonData it = _allSkeletonDataCache.find(key_skeletonData);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (it == _allSkeletonDataCache.end())</span><br><span class="line">    &#123;</span><br><span class="line">        SkeletonDataInCache skeleton_data_in_cache;</span><br><span class="line">        spAtlas* atlas = <span class="literal">nullptr</span>;</span><br><span class="line">        spAttachmentLoader* attachmentLoader = <span class="literal">nullptr</span>;</span><br><span class="line">        skeleton_data_in_cache._skeleton_data = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">        atlas = spAtlas_createFromFile(atlasFile.c_str(), <span class="number">0</span>);</span><br><span class="line">        CCASSERT(atlas, <span class="string">"loadSkeletonDataToCache Error  atlas file."</span>);</span><br><span class="line"></span><br><span class="line">        attachmentLoader = SUPER(Cocos2dAttachmentLoader_create(atlas));</span><br><span class="line"></span><br><span class="line">        spSkeletonJson* json = spSkeletonJson_createWithLoader(attachmentLoader);</span><br><span class="line">        json-&gt;scale = scale;</span><br><span class="line">        skeleton_data_in_cache._skeleton_data = spSkeletonJson_readSkeletonDataFile(json, skeletonJsonFile.c_str());</span><br><span class="line">        CCASSERT(skeleton_data_in_cache._skeleton_data, json-&gt;error ? json-&gt;error : <span class="string">"loadSkeletonDataToCache Error reading skeleton data file."</span>);</span><br><span class="line">        spSkeletonJson_dispose(json);</span><br><span class="line">        spAtlas_dispose(atlas);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (skeleton_data_in_cache._skeleton_data)</span><br><span class="line">        &#123;</span><br><span class="line">            _allSkeletonDataCache[key_skeletonData] = skeleton_data_in_cache;</span><br><span class="line">            <span class="keyword">return</span> skeleton_data_in_cache._skeleton_data;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//error release</span></span><br><span class="line">            <span class="keyword">if</span> (skeleton_data_in_cache._skeleton_data)</span><br><span class="line">            &#123;</span><br><span class="line">                spSkeletonData_dispose(skeleton_data_in_cache._skeleton_data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line">spSkeletonData* SkeletonAnimation::getSkeletonDataFromCache(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; key_skeletonData)</span><br><span class="line">&#123;</span><br><span class="line">    iteratorSkeletonData it = _allSkeletonDataCache.find(key_skeletonData);</span><br><span class="line">    <span class="keyword">if</span> (it != _allSkeletonDataCache.end())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> it-&gt;second._skeleton_data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> SkeletonAnimation::removeSkeletonData(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; key_skeletonData)</span><br><span class="line">&#123;</span><br><span class="line">    iteratorSkeletonData it = _allSkeletonDataCache.find(key_skeletonData);</span><br><span class="line">    <span class="keyword">if</span> (it != _allSkeletonDataCache.end()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (it-&gt;second._skeleton_data) spSkeletonData_dispose(it-&gt;second._skeleton_data);</span><br><span class="line"></span><br><span class="line">        _allSkeletonDataCache.erase(it);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> SkeletonAnimation::removeAllSkeletonData()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (iteratorSkeletonData it = _allSkeletonDataCache.begin(); it != _allSkeletonDataCache.end(); ++it) &#123;</span><br><span class="line">        <span class="keyword">if</span> (it-&gt;second._skeleton_data) spSkeletonData_dispose(it-&gt;second._skeleton_data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    _allSkeletonDataCache.clear();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> SkeletonAnimation::isExistSkeletonDataInCache(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; key_skeletonData)</span><br><span class="line">&#123;</span><br><span class="line">    iteratorSkeletonData it = _allSkeletonDataCache.find(key_skeletonData);</span><br><span class="line">    <span class="keyword">if</span> (it != _allSkeletonDataCache.end()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//end</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>, SkeletonAnimation::SkeletonDataInCache&gt; SkeletonAnimation::_allSkeletonDataCache;</span><br></pre></td></tr></table></figure></p><p>在 SkeletonAnimation.h 中添加如下代码<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> SkeletonAnimation* <span class="title">createFromCache</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; key_skeletonData)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> spSkeletonData* <span class="title">loadSkeletonDataToCache</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; key_skeletonData, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; skeletonJsonFile, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; atlasFile, <span class="keyword">float</span> scale = <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> spSkeletonData* <span class="title">getSkeletonDataFromCache</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; key_skeletonData)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">removeSkeletonData</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; key_skeletonData)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">removeAllSkeletonData</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">isExistSkeletonDataInCache</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; skeletonDataKeyName)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">SkeletonDataInCache</span> &#123;</span></span><br><span class="line">        spSkeletonData* _skeleton_data; </span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>, SkeletonDataInCache&gt;::iterator iteratorSkeletonData;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>, SkeletonDataInCache&gt; _allSkeletonDataCache;</span><br><span class="line">    <span class="comment">//end</span></span><br></pre></td></tr></table></figure></p><h3 id="Binding-to-lua"><a href="#Binding-to-lua" class="headerlink" title="Binding to lua"></a><strong>Binding to lua</strong></h3><p>既然写了这么多了,就要将这些代码绑定到lua中去</p><p>找到自己工程的的libluacocos2d的工程<br><img src="/posts/c4c0a180/auto_binding_2_lua_1.png" title="绑定C++到lua"><br>这里你可以自己写代码在 <code>lua_cocos2dx_spine_auto.cpp</code> 中,但是这不是一个程序员应该做的。<br>第二种做是:既然它的文件名有 <code>auto</code> 这个单词,一看就不是人写出来的,OK,去寻找答案。</p><p>到这个目录中去 <code>···/frameworks/cocos2d-x/tools/tolua/</code> 你会发现有一个<code>genbindings.py</code>的文件<br>你一运行可能报错,你去读他的 <code>README.md</code> ,发现他要你装一些python的库,那就按照说的安装吧<br>你可以 pip 命令也可以 自己下载zip 这个随意。<br>然后就是配置NDK,这个下载解压,配置 path 就完了,我就不多说了。</p><p>然后你运行可能还会报错</p><p>那就打开 <code>genbindings.py</code> 你会发现他需要的是NDK <strong>3.3-3.4</strong> 然而自己的NDK经过查看 是 <strong>3.5-3.6</strong> 没关系,把它这个所有相关 <strong>3.3  3.4</strong> 全部改成 <strong>3.5-3.6</strong>的就OK了。</p><p>改完后运行 Prefect ^-^.</p><h3 id="在lua中调用"><a href="#在lua中调用" class="headerlink" title="在lua中调用"></a><strong>在lua中调用</strong></h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sp.SkeletonAnimation: createFromCache(key)</span><br><span class="line">sp.SkeletonAnimation: isExistSkeletonDataInCache(key)</span><br><span class="line">sp.SkeletonAnimation: loadSkeletonDataToCache(key,jsonFilePath,atlasFilePath,scale =<span class="number">1</span>)      </span><br><span class="line">sp.SkeletonAnimation: getSkeletonDataFromCache(key)</span><br><span class="line">sp.SkeletonAnimation: removeSkeletonData(key)</span><br><span class="line">sp.SkeletonAnimation: removeAllSkeletonData()</span><br></pre></td></tr></table></figure><p>这里面有一个问题是你会发现返回的<code>骨胳数据</code>拿不到,这个是cocos2dx在绑定的时候并没有将这个数据类型绑定lua去,我上面那么写就是为了以后留个接口,当然你也可以自己把那个返回值去掉。</p><p>好了今天就到这吧。</p>]]></content>
      
      <categories>
          
          <category> cocos2dx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spine </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Using-Hexo</title>
      <link href="//posts/6743743b/"/>
      <url>//posts/6743743b/</url>
      <content type="html"><![CDATA[<p>这篇文章只是我对 hexo 的一些功能的测试吧，可能后会常用到这些东西</p><h2 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h2><h2 id="install-Hexo"><a href="#install-Hexo" class="headerlink" title="install Hexo"></a>install Hexo</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% blockquote [author[, source]] [link] [source_link_title] %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><blockquote><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.</p></blockquote><blockquote><p>Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</p><footer><strong>David Levithan</strong><cite>-Wide Awake</cite></footer></blockquote><blockquote><p>NEW: DevDocs now comes with syntax highlighting. <a href="http://devdocs.io">http://devdocs.io</a></p><footer><strong>@DevDocs</strong><cite><a href="https://twitter.com/devdocs/status/356095192085962752">twitter.com/devdocs/status/356095192085962752</a></cite></footer></blockquote><blockquote><p>Every interaction is both precious and an opportunity to delight.</p><footer><strong>Seth Godin</strong><cite><a href="http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html">Welcome to Island Marketing</a></cite></footer></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock [title] [lang:language] [url] [link text] %&#125;</span><br><span class="line">code snippet</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alert(&apos;Hello World!&apos;);</span><br><span class="line">print(&apos;Hello World!&apos;)</span><br></pre></td></tr></table></figure><p>language -&gt; OC<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[rectangle setX: <span class="number">10</span> y: <span class="number">10</span> width: <span class="number">20</span> height: <span class="number">20</span>];</span><br></pre></td></tr></table></figure></p><p>language -&gt; python<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print('Hello World!')</span><br></pre></td></tr></table></figure></p><h3 id="附加说明"><a href="#附加说明" class="headerlink" title="附加说明"></a><strong>附加说明</strong></h3><figure class="highlight plain"><figcaption><span>Array.map</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.map(callback[, thisArg])</span><br></pre></td></tr></table></figure><h3 id="附加说明和网址"><a href="#附加说明和网址" class="headerlink" title="附加说明和网址"></a><strong>附加说明和网址</strong></h3><figure class="highlight plain"><figcaption><span>_.compact</span><a href="http://underscorejs.org/#compact">Underscore.js</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">_.compact([0, 1, false, 2, &apos;&apos;, 3]);</span><br><span class="line">=&gt; [1, 2, 3]</span><br></pre></td></tr></table></figure><h3 id="反引号代码块"><a href="#反引号代码块" class="headerlink" title="反引号代码块"></a><strong>反引号代码块</strong></h3><p><code>[language] [title] [url] [link text] code snippet</code></p><p>language - &gt;OC<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[rectangle setX: <span class="number">10</span> y: <span class="number">10</span> width: <span class="number">20</span> height: <span class="number">20</span>];</span><br></pre></td></tr></table></figure></p><h3 id="插入Image图片"><a href="#插入Image图片" class="headerlink" title="插入Image图片"></a><strong>插入Image图片</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% img [class names] /path/to/image [width] [height] [title text [alt text]] %&#125;</span><br><span class="line">&#123;% asset_img fileName.* title&#125;</span><br></pre></td></tr></table></figure><img src="/posts/6743743b/1.jpg" title="wolf">/posts/6743743b/test.lua<a href="/posts/6743743b/test.lua" title="test.lua">test.lua</a><h3 id="引用文章"><a href="#引用文章" class="headerlink" title="引用文章"></a><strong>引用文章</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% post_path slug %&#125;</span><br><span class="line">&#123;% post_link slug [title] %&#125;</span><br></pre></td></tr></table></figure><h3 id="使用iframe"><a href="#使用iframe" class="headerlink" title="使用iframe"></a><strong>使用iframe</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% iframe url [width] [height] %&#125;</span><br></pre></td></tr></table></figure><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=515143440&auto=0&height=66"></iframe><!-- <iframe src="//music.163.com/outchain/player?type=2&id=515143440&auto=0&height=66" width="330" height="90" frameborder="0" allowfullscreen></iframe> –&gt;<!-- <img src="/path/to/image" class="[class names]" title="[width] [height] [title text [alt text]]"><p><img class="} –&gt;</p>">]]></content>
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> IT </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="//posts/4a17b156/"/>
      <url>//posts/4a17b156/</url>
      <content type="html"><![CDATA[<h2 id="搭建自己的博客在github-page"><a href="#搭建自己的博客在github-page" class="headerlink" title="搭建自己的博客在github page"></a>搭建自己的博客在github page</h2><p>经过2天的折腾的终于把自己的博客给搭建出来了,也可以说是自己的一个<code>Hello World</code> 吧<br><a id="more"></a><br>这个主题是使用<strong>Litten</strong>的theme通过hexo搭建</p><h2 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a><strong>准备环境</strong></h2><pre><code>* install git   * install node* 注册github的账号</code></pre><p><a href="https://git-scm.com/downloads">Git Download</a><br><a href="http://nodejs.cn/download/">nodejs Download</a><br><a href="https://github.com/">github 注册的地址</a></p><h2 id="再创建之前思考一个事情"><a href="#再创建之前思考一个事情" class="headerlink" title="再创建之前思考一个事情"></a><strong>再创建之前思考一个事情</strong></h2><p>就是在你做完这些之后，你开始写自己的博客的时候，突然之间要换电脑了，这个时候你要怎么办<br>这个思考是对于那些使用过 github 或者是使用过别的版本控制的工具。 </p><h2 id="Build-to-blog"><a href="#Build-to-blog" class="headerlink" title="Build to blog"></a><strong>Build to blog</strong></h2><pre><code>安装 nodejs 很简单,就是傻瓜式的安装。在安装 git 的时候也是一键式安装。然后自己注册github的账号。</code></pre><p>记得配置自己的 <code>nodejs的Path</code></p><p>在 cmd 窗口 输入 path<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/assets/hello-world/path_1.png" alt="path" title="">                </div>                <div class="image-caption">path</div>            </figure><br>我自己的 <code>nodejs</code> 在E盘</p><p>同样看看自己的 git 的 path 有没有配置</p><p>然后就是验证你的安装是否正确打开你 cmd 输入 git<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/assets/hello-world/git_1.png" alt="git" title="">                </div>                <div class="image-caption">git</div>            </figure><br>输入 node -v<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/assets/hello-world/node_1.png" alt="node -v" title="">                </div>                <div class="image-caption">node -v</div>            </figure><br>github 就不用验证了吧</p><p>然后就是利用 node 的 npm 工具去安装 hexo 输入 </p><pre><code>npm install -g hexo-cli</code></pre><p>如果自己的 hexo 安装成功的话</p><p>在 cmd 中 输入 hexo -v<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/assets/hello-world/hexo_1.png" alt="hexo -v" title="">                </div>                <div class="image-caption">hexo -v</div>            </figure></p><h2 id="创建自己的-hexo-工程"><a href="#创建自己的-hexo-工程" class="headerlink" title="创建自己的 hexo 工程"></a><strong>创建自己的 hexo 工程</strong></h2><p>假设自己的 hexo 的工程目录是在 D:\Pro\pro_wdh\nodejs</p><pre><code>1. 在 cmd 中 输入 pushd D:\Pro\pro_wdh\nodejs2. cmd的当前目录直接跳转到 D:\Pro\pro_wdh\nodejs3. 使用 hexo init 命令 初始化  （）hexo init [folderName] ）</code></pre><blockquote><p>hexo init hexo<br>cd hexo<br>nmp install</p></blockquote><p>完成之后目录结构如下：</p><pre><code>.├── _config.yml├── package.json├── scaffolds├── source|   ├── _drafts|   └── _posts└── themes</code></pre><h3 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a><strong>_config.yml</strong></h3><p>网站的 配置 信息，您可以在此配置大部分的参数。</p><h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a><strong>package.json</strong></h3><p>应用程序的信息。EJS, Stylus 和 Markdown renderer 已默认安装，您可以自由移除。</p><h3 id="scaffolds"><a href="#scaffolds" class="headerlink" title="scaffolds"></a><strong>scaffolds</strong></h3><p>模版 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。</p><p>Hexo的模板是指在新建的markdown文件中默认填充的内容。例如，如果您修改scaffold/post.md中的Front-matter内容，那么每次新建一篇文章时都会包含这个修改。</p><h3 id="source"><a href="#source" class="headerlink" title="source"></a><strong>source</strong></h3><p>资源文件夹是存放用户资源的地方。除 <em>posts 文件夹之外，开头命名为 </em> (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。</p><h3 id="themes"><a href="#themes" class="headerlink" title="themes"></a><strong>themes</strong></h3><p>主题 文件夹。Hexo 会根据主题来生成静态页面。</p><h2 id="运行自己的hexo工程"><a href="#运行自己的hexo工程" class="headerlink" title="运行自己的hexo工程"></a><strong>运行自己的hexo工程</strong></h2><p>在 cmd 中 输入 hexo s<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/assets/hello-world/hexo_2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>在自己的浏览器中打开 <code>http://localhost:4000/.</code></p><p>这时你会看到自己的静态网页</p><p><a href="https://segmentfault.com/a/1190000002632530">更多的 hexo的命令</a><br><a href="https://hexo.io/zh-cn/">hexo 的官网</a></p><h2 id="部署自己的笔记2github"><a href="#部署自己的笔记2github" class="headerlink" title="部署自己的笔记2github"></a><strong>部署自己的笔记2github</strong></h2><p>网上的一些教程都是 使用 SSH 去上传自己的博客<br>但是使用 htpp 的方式也同样可以 上传</p><p>创建自己的 github 的仓库<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/assets/hello-world/github_1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>上面的仓库名字就和你 github 的名字一样就行了</p><p>然后就是在 hexo 的根目录下的 _config.yml 中 找到<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/assets/hello-world/config_1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>按照图片上的配置自己的 github 仓库的地址<br>github 仓库的地址在这里拿<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/assets/hello-world/github_2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>然后执行 hexo的命令 在cmd中输入  </p><pre><code>1.hexo clean2.hexo g3.hexo d</code></pre><p>静静的等待</p><p>上传完成之后</p><p>打开 <code>http://Test.github.io</code> 就可以看到自己的博客了</p><h2 id="回答上面的提出的思考"><a href="#回答上面的提出的思考" class="headerlink" title="回答上面的提出的思考"></a><strong>回答上面的提出的思考</strong></h2><p>答案就是 在 github 上创建自己的 branch(分支)</p><p>我是在自己的 github 创建自己的 blog(分支)</p><p><a href="http://note.youdao.com/noteshare?id=7abb057f779aca20328c74a7c810e027&amp;sub=855026A2B8904F61A0933D26CA9E27FF">git 的一些命令</a></p><p>不是太全,但是应对日常还是可以的</p><p>做法如下：</p><pre><code>git chcekout -b bloggit add -Agit commit - m &quot;commit my blog&quot;git push origin blog</code></pre><p>解释一下吧</p><blockquote><p>创建新的分支 blog<br>添加自己的文件到缓存区<br>提交到本地版本库<br>推送到远端</p></blockquote><p><a href="http://www.runoob.com/?s=git">更多 git 的知识</a></p><p>这只是一些基础</p><p>更多需要你多去尝试,多自己动手。</p><p>有疑问可以加QQ一起讨论</p>]]></content>
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hello world </tag>
            
            <tag> github page </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
