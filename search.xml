<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>cocos2dx-JS-OC-Java互相调用</title>
      <link href="//posts/41d43874/"/>
      <url>//posts/41d43874/</url>
      <content type="html"><![CDATA[<h4 id="cocos2dx-js-java-oc-和-js-的相互调用"><a href="#cocos2dx-js-java-oc-和-js-的相互调用" class="headerlink" title="cocos2dx js java oc 和 js 的相互调用"></a>cocos2dx js java oc 和 js 的相互调用</h4><p>引擎版本: 3.17<br>语言: js<br>Xcode: 10.1<br>AndroidStudio: 3.2.1<br>时间: 2018年12月14日16:23:47</p><blockquote><p>看这篇文章需要 会一些 android java oc ios 的一些知识的基础 不然看着可能有点费劲.</p></blockquote><h2 id="js调用java"><a href="#js调用java" class="headerlink" title="js调用java"></a>js调用java</h2><p>js 调用 java java中声名的方法需要是静态方法(static method)</p><a id="more"></a><h5 id="Android-平台下"><a href="#Android-平台下" class="headerlink" title="Android 平台下"></a>Android 平台下</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(cc.sys.os == cc.sys.OS_ANDROID)&#123;</span><br><span class="line">    jsb.reflection.callStaticMethod(<span class="string">'类名加全路径'</span>,<span class="string">'方法名字'</span>,<span class="string">'方法的签名'</span>,<span class="string">'传递参数'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ej: js</span><br><span class="line">    jsb.reflection.callStaticMethod(<span class="string">'org/cocos2dx/javascript/AppActivity'</span>,<span class="string">'getStrVdong'</span>,<span class="string">'(Ljava/lang/String;)V'</span>,<span class="string">'haha'</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">ej: java</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getStrVdong</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">    log.i(<span class="string">'cocso2dx-js js call java'</span>, str);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">其他方法签名的写法</span><br><span class="line">ej:</span><br><span class="line">    (Ljava/lang/String;)V <span class="comment">//参数是字符串 没有返回值</span></span><br><span class="line">    (I)V <span class="comment">// void(int);</span></span><br><span class="line">    ()V <span class="comment">// void();</span></span><br><span class="line">    (IZ)V <span class="comment">// void(int,boolean);</span></span><br><span class="line">    (IZ)Z <span class="comment">// boolean(int,boolean);</span></span><br><span class="line">    ()Ljava/lang/String; <span class="comment">//String();</span></span><br></pre></td></tr></table></figure><h5 id="支持传递的数据类型"><a href="#支持传递的数据类型" class="headerlink" title="支持传递的数据类型"></a>支持传递的数据类型</h5><ul><li>Z 布尔</li><li>I int</li><li>F float</li><li>字符串 Ljava/lang/String;</li></ul><blockquote><p>注意这里有个字符串是有个分号的</p></blockquote><h2 id="java调用js"><a href="#java调用js" class="headerlink" title="java调用js"></a>java调用js</h2><p>java调用js 实际是 将字符串转成 function 然后调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 导入需要的包 */</span></span><br><span class="line"><span class="keyword">import</span> org.cocos2dx.lib.Cocos2dxJavascriptJavaBridge;</span><br><span class="line"><span class="keyword">import</span> org.cocos2dx.lib.Cocos2dxHelper;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这里需要注意的是调用 js 代码需要运行在 GL 线程中</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">这里实现的逻辑是 将回调的逻辑移交到 js 代码层中, 这样就可以在 js 中 写逻辑 java 在合适的时机去执行这个调用 比如在做支付的时候 需要在之后响应后在 做游戏逻辑的处理.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">callFuncVdong</span><span class="params">(<span class="keyword">final</span> String code)</span> </span>&#123;</span><br><span class="line">    Cocos2dxHelper.runOnGLThread(<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Cocos2dxJavascriptJavaBridge.evalString(code);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">写一下 js 调用的例子</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">ej:</span><br><span class="line">    jsb.reflection.callStaticMethod(</span><br><span class="line">    <span class="string">"org/cocos2dx/javascript/AppActivity"</span>,</span><br><span class="line">    <span class="string">"callFuncVdong"</span>,</span><br><span class="line">    <span class="string">"(Ljava/lang/String;)V"</span>,</span><br><span class="line">    <span class="string">"g_funcList.callFunc()"</span>); <span class="comment">/*呼叫一个全局函数*/</span></span><br></pre></td></tr></table></figure><h4 id="问题记录"><a href="#问题记录" class="headerlink" title="问题记录"></a>问题记录</h4><h5 id="js调用-java-没反应"><a href="#js调用-java-没反应" class="headerlink" title="js调用 java 没反应"></a>js调用 java 没反应</h5><blockquote><p>有很大的几率是 js调用中 方法签名没有写正确 你需要检查你的写法 具体的写法上面有写的.</p></blockquote><hr><h2 id="js-调用-oc"><a href="#js-调用-oc" class="headerlink" title="js 调用 oc"></a>js 调用 oc</h2><p>js 调用 oc 其实和 Java的写法是大同小异的</p><ul><li>在 ios/AppController.h 中声名 静态函数</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+(NSString *) showVdong:(NSString *)str title:(NSString *)tit;</span><br></pre></td></tr></table></figure><ul><li><p>在 ios/AppController.mm 文件中实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@implementation</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在这个之间实现函数</span></span><br><span class="line"></span><br><span class="line">+(NSString *) showVdong:(NSString *)str title:(NSString *)tit &#123;</span><br><span class="line">    <span class="keyword">return</span> @<span class="string">"haha"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure></li><li><p>js 调用用例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(cc.sys.os == cc.sys.OS_IOS || cc.sys.os == cc.sys.OS_OSX) &#123;</span><br><span class="line">    <span class="keyword">var</span> ret = jsb.reflection.callStaticMethod(<span class="string">"AppController"</span>,<span class="string">"showVdong:title"</span>,<span class="string">"你是谁???"</span>,<span class="string">"天呢"</span>);</span><br><span class="line">    cc.log(<span class="string">'****************'</span>,ret);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="oc-调用-js"><a href="#oc-调用-js" class="headerlink" title="oc 调用 js"></a>oc 调用 js</h2><ul><li><p>在 ios/AppController.mm 文件中实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cocos/scripting/js-bindings/manual/ScriptingCore.h"</span></span></span><br><span class="line"></span><br><span class="line">+(NSString *) showVdong:(NSString *)str title:(NSString *)tit &#123;</span><br><span class="line">    </span><br><span class="line">    ScriptingCore::getInstance()-&gt;evalString(<span class="string">"test"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> @<span class="string">"haha"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>js 中的测试用例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    cc.log(<span class="string">"OC call JS success !!!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>参考地址(这个是CocosCreator原生游戏调用) &gt; <a href="https://www.cnblogs.com/billyrun/articles/8529503.html">https://www.cnblogs.com/billyrun/articles/8529503.html</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>AndroidStudio打包Cocos2dx</title>
      <link href="//posts/a2412c06/"/>
      <url>//posts/a2412c06/</url>
      <content type="html"><![CDATA[<p>前几天闲着没事,去弄了一下AndroidStudio打包最新版 cocos2dx 系列原生平台的安装包.</p><p>引擎版本: 3.17<br>AndroidStudio版本: 3.2.1<br>SDK: 27<br>NDK: android-ndk-r16b<br>gradle: 4.1</p><p>首先提供这几个下载地址,有的可能需要翻墙,这个你们自己解决.</p><p><a href="http://services.gradle.org/distributions/">gradle</a><br>android sdk android studio 自带有下载的管理器<br><a href="https://developer.android.com/ndk/downloads/">anroid ndk</a><br><a href="https://developer.android.com/studio/">android studio</a><br><a href="https://www.cocos.com/">cocos2dx-系列</a></p><a id="more"></a><h1 id="报错记录"><a href="#报错记录" class="headerlink" title="报错记录"></a>报错记录</h1><h4 id="Gradle-sync-failed-SSL-peer-shut-down-incorrectly"><a href="#Gradle-sync-failed-SSL-peer-shut-down-incorrectly" class="headerlink" title="Gradle sync failed: SSL peer shut down incorrectly"></a>Gradle sync failed: SSL peer shut down incorrectly</h4><blockquote><p>查这个路径下 gradle–&gt;wrapper–&gt;gradle-wrapper.properties</p><p>要下载 gradle 版本</p><p>ej:distributionUrl=https\://services.gradle.org/distributions/gradle-4.1-all.zip</p><p><a href="http://services.gradle.org/distributions/">gradle下载地址</a></p><p>删除原先的资源</p><p>存放到下面路径下 C:\Users\Administrator.gradle\wrapper\dists\gradle-4.1-all\bzyivzo6n839fup2jbap0tjew</p><p>记住一定要放到这个乱码的文件夹中</p></blockquote><p>如果上面的步骤你你把android随机生成的文件夹(bzyivzo6n839fup2jbap0tjew) 删了 你可以执行下面的步骤</p><blockquote><p>D:\pro\cocos_pro\testCocosJs\frameworks\runtime-src\proj.android\gradlew.bat 执行这个脚本也可以.</p></blockquote><p>执行你这里面的这个预处理脚本,它会重新生成一个类似于上面个文件夹,不要希望这个脚本能够下载好你想要的 gradle 版本.这会很慢,可以直接停掉这个批处理.<br>执行这一步的目的是为了生成 上面类似的文件夹(bzyivzo6n839fup2jbap0tjew).</p><p>当然如果你有更好的方案也可以.</p><hr><h4 id="No-cached-version-of-com-android-tools-build-gradle-3-0-0-available-for-offline-mode"><a href="#No-cached-version-of-com-android-tools-build-gradle-3-0-0-available-for-offline-mode" class="headerlink" title="No cached version of com.android.tools.build:gradle:3.0.0 available for offline mode."></a>No cached version of com.android.tools.build:gradle:3.0.0 available for offline mode.</h4><blockquote><p>File/setting/build…/gradle/Offline work 禁掉</p></blockquote><hr><p><code>如果 gradle 同步的很慢可以使用 镜像工程</code></p><h4 id="替换proj-adnroid-build-gradle-中的地址"><a href="#替换proj-adnroid-build-gradle-中的地址" class="headerlink" title="替换proj.adnroid/build.gradle 中的地址"></a>替换proj.adnroid/build.gradle 中的地址</h4><p>替换为镜像库</p><blockquote><p>maven { url ‘<a href="https://maven.aliyun.com/repository/google">https://maven.aliyun.com/repository/google</a>‘ }</p><p>maven { url ‘<a href="https://maven.aliyun.com/repository/jcenter">https://maven.aliyun.com/repository/jcenter</a>‘ }</p><p>maven { url ‘<a href="http://maven.aliyun.com/nexus/content/groups/public">http://maven.aliyun.com/nexus/content/groups/public</a>‘ }</p></blockquote><p>我这个下面有截图</p><img src="/posts/a2412c06/1.png" title="build.gradle配置"><hr><h4 id="官方提供的打包配置-地址"><a href="#官方提供的打包配置-地址" class="headerlink" title="官方提供的打包配置 地址"></a>官方提供的打包配置 地址</h4><blockquote><p><a href="http://docs.cocos2d-x.org/cocos2d-x/en/installation/Android-Studio.html">官方打包配置</a></p></blockquote><hr><h4 id="No-toolchains-found-in-the-NDK-toolchains-folder-for-ABI-with-prefix-mips64el-linux-android"><a href="#No-toolchains-found-in-the-NDK-toolchains-folder-for-ABI-with-prefix-mips64el-linux-android" class="headerlink" title="No toolchains found in the NDK toolchains folder for ABI with prefix: mips64el-linux-android"></a>No toolchains found in the NDK toolchains folder for ABI with prefix: mips64el-linux-android</h4><blockquote><p>在 ndk 的根目录里面有个 toolchains 的文件夹 里面没有 这个文件 mips64el-linux-android 原因是我用的是 r18 的 但是那里面没有这个东西,我去使用r16 里面就有这个东西.</p></blockquote><hr><h4 id="ndk-r9-下载路径"><a href="#ndk-r9-下载路径" class="headerlink" title="ndk r9 下载路径"></a>ndk r9 下载路径</h4><blockquote><p>提供一下r9的下载路径 因为之前打包 3.15 是用的是 r9 所以这里记录一下地址 防止后面找不到了, 上面ndk 归档 只是到了 r10.</p></blockquote><p>NDK r9d：</p><p><a href="http://dl.google.com/android/ndk/android-ndk-r9d-windows-x86.zip">r9-x86-window</a><br><a href="http://dl.google.com/android/ndk/android-ndk-r9d-windows-x86_64.zip">r9-x86_64-window</a><br>[r9-x86-mac]<a href="http://dl.google.com/android/ndk/android-ndk-r9d-darwin-x86.tar.bz2（Mac环境）">http://dl.google.com/android/ndk/android-ndk-r9d-darwin-x86.tar.bz2（Mac环境）</a><br><a href="http://dl.google.com/android/ndk/android-ndk-r9d-linux-x86.tar.bz2">r9-x86-linux</a><br><a href="http://dl.google.com/android/ndk/android-ndk-r9d-linux-x86_64.tar.bz2">r9-x86_64-linux</a><br><a href="http://dl.google.com/android/ndk/android-ndk-r9d-cxx-stl-libs-with-debug-info.zip">r9d-cxx-stl-libs-with-debug-info</a></p><hr><h4 id="配置NDK-环境变量"><a href="#配置NDK-环境变量" class="headerlink" title="配置NDK 环境变量"></a>配置NDK 环境变量</h4><blockquote><p>ANDROID_NDK_ROOT</p></blockquote><hr><h4 id="编译externalNativeBuildDebug出错"><a href="#编译externalNativeBuildDebug出错" class="headerlink" title="编译externalNativeBuildDebug出错"></a>编译externalNativeBuildDebug出错</h4><blockquote><p>可能出现路径太长导致 文件 查找失败(win10)<br>下面路径有个大神写了个补丁.</p><p>[修复ndk打包长路径查找失败]<a href="https://discuss.cocos2d-x.org/t/the-solution-of-ndk-compile-system-longpaths-issue-on-windows-platform/42705">https://discuss.cocos2d-x.org/t/the-solution-of-ndk-compile-system-longpaths-issue-on-windows-platform/42705</a></p></blockquote><p>这个打包记录是纯净的打包没有介入任何 sdk(如,微信的sdk facebook 第三方广告平台(admob) 等);</p><p>我的每篇文章都不希望写的太长,不然看着都烦人. 这里之所以记录时间是为了 提醒一下 阅读者这里也许不是最新的,如果已过很长时间,那就给你提供,经验的借鉴吧.</p><p>时间: 2018年12月7日22:28:49</p>]]></content>
      
      <categories>
          
          <category> cocos2dx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cocos2dx </tag>
            
            <tag> android studio </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>记录TweenLite库</title>
      <link href="//posts/90e70f70/"/>
      <url>//posts/90e70f70/</url>
      <content type="html"><![CDATA[<p>今天主要记录一下 TweenLite 这个补间动画库,他们的官方地址<br><a href="https://greensock.com">TweenLite官方网址</a></p><p>库版本是:2.0.2</p><p>这里面有几个文件可以使用 TweenLite TimelineLite TweenlineMax TweenMax</p><p>我这里就简单说一下这几个文件都做了什么事情,说先说明一下我这里主要研究跟 <code>CocosCreator</code> 相关的功能,它里面还有一些关于h5的东西,感兴趣的可以了解一下.<br><a id="more"></a></p><h2 id="讲解每个文件的功能"><a href="#讲解每个文件的功能" class="headerlink" title="讲解每个文件的功能"></a>讲解每个文件的功能</h2><h3 id="TweenLite"><a href="#TweenLite" class="headerlink" title="TweenLite"></a>TweenLite</h3><p>这个是 Tween 动画的基础库, 所有的其他更丰富的功能都是在这个基础上封装的.</p><p>里面主要使用<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TweenLite.to(target:<span class="built_in">Object</span>, <span class="attr">duration</span>:<span class="built_in">Number</span>, <span class="attr">vars</span>:<span class="built_in">Object</span>)</span><br></pre></td></tr></table></figure></p><p>第一个是操作的对象,第二个是执行的时间,第三个是要进行补间的属性.</p><p>首先你们要导入这个文件(TweenLite.js)<br>你下载的文件里面应该是有个压缩后的文件 (TweenLite.min.js) 这个更省空间</p><p>例如如下的例子<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> TweenLite <span class="keyword">from</span> <span class="string">"TweenLite.min"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    TweenLite.to(<span class="keyword">this</span>.node,<span class="number">2</span>,&#123;<span class="attr">x</span>:<span class="number">100</span>,<span class="attr">y</span>:<span class="string">"+=100"</span>,<span class="attr">rotation</span>:<span class="number">45</span>,<span class="attr">opacity</span>:<span class="string">"+=255"</span>,<span class="attr">onComplete</span>:<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'执行结束'</span>);</span><br><span class="line">    &#125;&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main();</span><br></pre></td></tr></table></figure></p><p>上面这个例子是 让一个node 同时执行 位置, 旋转 和透明度的 变换,<br>这种写法要比 CocosCreator 的那套 Action 要简洁</p><p>其他的 API 我就捡着几个重要的说一下吧,其他的你们可以看一下他们的<a href="https://greensock.com/docs/">官文文档</a>讲解的很清楚</p><p>主要说第三个参数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    x:<span class="number">100</span>,<span class="comment">// 跑到当前坐标系下 x=100 的位置</span></span><br><span class="line">    y:<span class="string">"+=100"</span>, <span class="comment">// 自身值 增加100</span></span><br><span class="line">    ...,</span><br><span class="line"></span><br><span class="line">    onStartParams:[<span class="string">'123'</span>],</span><br><span class="line">    onStart:<span class="function">(<span class="params">p1</span>)=&gt;</span>&#123;<span class="built_in">console</span>.log(p1)&#125;,<span class="comment">// 输出 123  在这个动画开始执行的时候调用</span></span><br><span class="line">    onCompleteParams:[<span class="string">'123'</span>],</span><br><span class="line">    onComplete:<span class="function">(<span class="params">p1</span>)=&gt;</span>&#123;<span class="built_in">console</span>.log(p1)&#125;,<span class="comment">// 输出入123 在这个动画结束的时候调用</span></span><br><span class="line">    onReverseComplete:<span class="function"><span class="params">()</span>=&gt;</span>&#123;&#125;, <span class="comment">// 调用翻转函数的说 这个动画结束后 会调用</span></span><br><span class="line">    delay:<span class="number">2</span>,<span class="comment">// 开始延时</span></span><br><span class="line">    ease: Elastic.easeOut, <span class="comment">// 要使用这东西要导入 easeing 文件下的那个 easePack.js 文件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>调用TweenLite.to 函数的时候是会去返回一个对象的, 在这个补间动画库中 使用的是链式(chain)调用, 这个对象使用几个 api 的</p><blockquote><p>pause 暂停当前的动画<br>play 播放当前动画<br>resume 恢复当前动画<br>reverse 在任意时间都可以调用这个 翻转函数 翻转当前动画<br>restart 从新开始<br>progress 它的取值区间是[0,1] 指定当前动画处开始播放<br>seek 跳转到指定位置 和 progress 函数有点相似 这个指的是时间的位置点</p></blockquote><p>例子如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Ease <span class="keyword">from</span> <span class="string">"EasePack.min"</span>;</span><br><span class="line"><span class="keyword">import</span> TweenLite <span class="keyword">from</span> <span class="string">"TweenLite.min"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tl = TweenLite.to(<span class="keyword">this</span>.node,<span class="number">2</span>,&#123;</span><br><span class="line">    x:<span class="number">100</span>,</span><br><span class="line">    ease: Elastic.easeOut</span><br><span class="line">&#125;);</span><br><span class="line">tl.play();</span><br><span class="line">tl.pause();</span><br><span class="line">tl.resume();</span><br><span class="line">tl.restart();</span><br><span class="line">tl.progress(<span class="number">0.5</span>);</span><br><span class="line">tl.seek(<span class="number">0.5</span>);</span><br><span class="line">tl.progress(<span class="number">0.5</span>).pause();</span><br></pre></td></tr></table></figure></p><p>因为他是链式调用所以 最后一个的写法是不会报错的.<br>你们要是想要使用 ease 这个属性的话 是需要将 EasePack.min.js 导入到工程中 不需要在代码中导入, 至于为什么可以自己去看他们 uncompressed 文件下对应的代码文件.</p><p>后面那三个文件都是在这个基础上扩展的所以需要理解这个文件的用法.</p><blockquote><p>TweenLite 还有其他的几个静态函数 TweenLite.to TweenLite.from TweenLite.fromTo 用法比较的简单看文档也就可知道了.</p></blockquote><h3 id="TimelineLite"><a href="#TimelineLite" class="headerlink" title="TimelineLite"></a>TimelineLite</h3><p>看这个名字凭字面上的意思是 时间线 也可以理解成 时间轴,看官方文档解释是他可以形成一个队列,就是说你可以组成一个动画列表一次播放.</p><p>例子如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> TimelineLite <span class="keyword">from</span> <span class="string">"TimelineLite.min"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tl = <span class="keyword">new</span> TimelineLite();<span class="comment">// 创建一个新实例对象</span></span><br><span class="line"></span><br><span class="line">tl.to(<span class="keyword">this</span>.node,<span class="number">2</span>,&#123;<span class="attr">x</span>:<span class="string">"+=100"</span>&#125;)</span><br><span class="line">.to(<span class="keyword">this</span>.node,<span class="number">2</span>,&#123;<span class="attr">y</span>:<span class="string">"+=100"</span>&#125;);</span><br></pre></td></tr></table></figure></p><p>这个就是创建了一个动画队列,让一个物体向x轴正方向移动100像素, 然后在向y轴正方向移动100像素.</p><p>里面的参数配置和 TweenLite 里面的配置是一样的.</p><p>他提供了 TweenLite对象的嵌套 同时也支持 Timeline 的嵌套 为什么这么说看下面的例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> TimelineLite <span class="keyword">from</span> <span class="string">"TimelineLite.min"</span>;</span><br><span class="line"><span class="keyword">import</span> TweenLite <span class="keyword">from</span> <span class="string">"TweenLite.min"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tl = <span class="keyword">new</span> TimelineLite();<span class="comment">// 创建一个新实例对象</span></span><br><span class="line"></span><br><span class="line">tl.to(<span class="keyword">this</span>.node,<span class="number">2</span>,&#123;<span class="attr">x</span>:<span class="string">"+=100"</span>&#125;)</span><br><span class="line">.to(<span class="keyword">this</span>.node,<span class="number">2</span>,&#123;<span class="attr">y</span>:<span class="string">"+=100"</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tl1 = <span class="keyword">new</span> TimelineLite();</span><br><span class="line">tl1.add(TweenLite.to(<span class="keyword">this</span>.node,<span class="number">2</span>,&#123;<span class="attr">x</span>:<span class="string">"+=100"</span>&#125;));</span><br><span class="line">tl1.add(TweenLite.to(<span class="keyword">this</span>.node,<span class="number">2</span>,&#123;<span class="attr">y</span>:<span class="string">"+=100"</span>&#125;));</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tl2 = <span class="keyword">new</span> TimelineLite();</span><br><span class="line">tl2.to(<span class="keyword">this</span>.node,<span class="number">2</span>,&#123;<span class="attr">x</span>:<span class="string">"+=100"</span>&#125;);</span><br><span class="line"></span><br><span class="line">tl1.append(tl2);</span><br></pre></td></tr></table></figure><p>这里面 to 和 add 的功能效果都是一样的 可以看到 add 里面是个 TweenLite 对象 所以 TimelineLite是维护 TweenLite每个对象进而形成 一个队列</p><blockquote><p>TimelineLite 还有其他的用 入 addLabel 等函数,看他们解释和代码例子很容易懂</p></blockquote><h3 id="TimelineMax"><a href="#TimelineMax" class="headerlink" title="TimelineMax"></a>TimelineMax</h3><p>是对 TimelineLite 进行的扩展 主要扩展 使用 加入 repeat repeatDelay yoyo  currentLabel(), addCallback(), removeCallback(), tweenTo(), tweenFromTo(), getLabelAfter(), getLabelBefore(), getActive().</p><p>如果上面额功能不能满足你们项目的需求可以再去用 TimelineMax 这个更强大额 扩展包.</p><h3 id="TweenMax"><a href="#TweenMax" class="headerlink" title="TweenMax"></a>TweenMax</h3><p>TweenMax 是对 TweenLite 的扩展, 也加入 repeat(), repeatDelay(), yoyo() 等等, 而且看他们未压缩的 代码 好像这个文件是可以不要依赖 其他三的,因为他把其他三个都压缩到这个文件里面了,但是相应的文件的大小也增加了,同时也集成了一些扩展插件. 你们的项目如果对 代码的大小没有太高的要求的话,你们可以去直接导入这个TweenMax.min.js 这个文件.</p><p>上面讲了这么多也只是个入们吧,这个库里面还封装了一些很多有趣的东西,你们可以去多了解了解.</p><p>这里使用这个库去替代 CocosCreator 的 Action 主要是 api 使用灵活, 写法简单,运行速度也很快. 也有一些 Action 所不具有的动能 入随时翻转,控制动画流程,暂停动画等等,随机点开始播放动画,时间轴交叉等.</p><p>好了,今天就先到这里.<br>写作不易,且行且珍惜.</p><p>我是小魏. 时间:2018年11月21日17:16:36.</p>]]></content>
      
      <categories>
          
          <category> CocosCreator </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CocosCreator </tag>
            
            <tag> TweenLite </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>QQ玩一玩打包</title>
      <link href="//posts/dd666e1a/"/>
      <url>//posts/dd666e1a/</url>
      <content type="html"><![CDATA[<p>今天主要纪录最近对 QQPlay(玩一玩)打包的纪录. 然后这里只是纪录我目前使用的引擎(Cocos Creator version 2.x.x),精力有限.</p><p><a href="https://hudong.qq.com/docs/access/">QQPlay官方文档</a></p><h1 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a><strong>大纲</strong></h1><pre><code>1. 玩一玩包体中缺少`Utils`文件2. 怎么读取最新的 bricks 引擎3. 解决 xcode 打包到手机过程中出现的错误4. 空泛讲解整个玩一玩上传流程5. 避免上传后台而实时跟新 android 机里面的逻辑为最新6. 实现厘米秀大部分功能7. 关于获取每个游戏用户的 openkey 的获取问题</code></pre><a id="more"></a><blockquote><p>未完待续<br>厘米秀游戏性能审核标准<br>自建后台 前后端需要注意什么<br>审核前游戏应该准备些什么<br>玩一玩后台需要的一些配置</p></blockquote><h2 id="玩一玩包体中缺少Utils文件"><a href="#玩一玩包体中缺少Utils文件" class="headerlink" title="玩一玩包体中缺少Utils文件"></a><strong>玩一玩包体中缺少<code>Utils</code>文件</strong></h2><p>在你上传厘米秀后台的时候如果只是单纯使用<code>Cocos Creator</code> 发布<code>QQPlay</code> 平台的时候,在 ~/build/qqplay/libs/element/ 这个路径下缺少一个 Utils.js 的脚本文件 但是引擎团队在2.x.x 版本中 还一直没有修复这个问题,原因在 ~/build/qqplay/libs/qqplay-adapter.js 中又引入过这个文件.<br><img src="/posts/dd666e1a/1.png" title="Utils引入报错点"><br>在论坛中搜到的解决方案是 将 qqplay-adapter.js 脚本中的这一行代码注释掉,这个在前期没用到对应功能的时候不会报错,但是等用到Utils.js 里面的功能是就会发现会再次报错.</p><p>报错的原因:加载远程图片会使用 libs/element/HTMLImageElement.js 脚本<br><img src="/posts/dd666e1a/2.png" title="报错点"></p><p>解决方案: </p><ol><li>使用CocosCreator(1.x.x) 版本随便打包个 QQPlay 平台,将其中的<code>Utils.js</code>粘到当前工程中 的 <code>~/build/qqplay/libs/element/</code> 目录中</li><li>修改<code>Utils.js</code>中对其他库的引用路径(CocosCreator(2.x.x)中将第三方引来的脚本归类到<code>~build/qqplay/libs/other/</code>这个目录下了), 修改的点如下:<img src="/posts/dd666e1a/3.png" title="修改Utils.js脚本"></li><li>建立一个和 <code>~/build</code> 同级的目录(<code>build-templates</code>) 将上一步的 <code>Utils.js</code>文件也复制一份到 <code>~/build-templates/qqplay/libs/element/</code> 中, 类似于下面的这样<img src="/posts/dd666e1a/4.png" title="复制Utils.js脚本到构建模板中">(这样做的目的是可以每次构建的时候,打的玩一玩的包都含有 Utils.js 脚本);</li></ol><a href="/posts/dd666e1a/Utils.js.txt" title="Utils.js.txt">Utils.js.txt</a> <p>1.9.3 打包的 Utils.js 脚本 可以参考 这里面我已经修改过了,可以直接使用.</p><h2 id="怎么读取最新的-bricks-引擎"><a href="#怎么读取最新的-bricks-引擎" class="headerlink" title="怎么读取最新的 bricks 引擎"></a><strong>怎么读取最新的 bricks 引擎</strong></h2><p>下面这是引擎团队的说法 和 玩一玩官方文档的说法<br><img src="/posts/dd666e1a/5.png" title="引擎团队的说法"><br>玩一玩 官方说法<br><img src="/posts/dd666e1a/6.png" title="玩一玩官方文档的说法"></p><p>需要科学上网<br><a href="https://bitbucket.org/">bitbucket官网</a><br>解决方案:</p><ol><li>登录官网注册账号</li><li>将自己的账号发给 <code>hudong@tencent.com</code>  邮件的主题写 <code>引擎申请权限</code><br>等待大概 4 天左右 腾讯的相关工作人员会给你这个账号添加权限,你就可以试试获取最新的xcode工程</li></ol><blockquote><p>10.25 玩一玩官网 给出了 bricks 引擎的下载地址,也就是说你可以不用申请了<br><a href="https://hudong.qq.com/docs/engine/debug/PublicBrickEngineGame.zip">bricks XCode 工程</a><br><a href="https://hudong.qq.com/docs/engine/debug/tools.html">bricks 下载页面</a></p></blockquote><h2 id="解决-xcode-打包到手机过程中出现的错误"><a href="#解决-xcode-打包到手机过程中出现的错误" class="headerlink" title="解决 xcode 打包到手机过程中出现的错误"></a><strong>解决 xcode 打包到手机过程中出现的错误</strong></h2><p>这里主要是 苹果签名 出的错误<br>这里面 会有 详细的 解决方案(我不想重复造轮子)<br><a href="https://blog.csdn.net/zyw_java/article/details/80531380">解决打包签名报错问题</a><br>他这里面用的是 将 com.tencent.PublicBrickEngineGame 修改为 com.test.PublicBrickEngineGame 你会发现还是报错 ,,, 那就将 test 修改为被人很难想到的名字就行了 ,,, 然后 try again</p><h2 id="空泛讲解整个玩一玩上传流程"><a href="#空泛讲解整个玩一玩上传流程" class="headerlink" title="空泛讲解整个玩一玩上传流程"></a><strong>空泛讲解整个玩一玩上传流程</strong></h2><ol><li>引擎打包 QQPlay 平台的包</li><li>修复引擎包内缺少的文件 <code>gameConfig.json</code> 里面需要的填充的内容如下<img src="/posts/dd666e1a/7.png" title="gameConfig.json"><a href="https://hudong.qq.com/docs/engine/engine/native/framework/intro.html#2">gameConfig.json|官方解释地址</a></li><li><p>在你调试期间可以先 不把 构建面板的 MD5 开始 , 这样你可以,先将 gameConfig.json 放入到 <code>~/build-templates/qqplay/</code> 中 ,,, 测试完毕后将 MD5 开启, 然后打正式包的时候需要手动填充 gameConfig.json 文件.<br>gameConfig.json 内容如下:</p><img src="/posts/dd666e1a/8.png" title="gameConfig.json"></li><li><p>在后台创建测试版</p></li></ol><h2 id="避免上传后台而实时跟新-android-机里面的逻辑为最新"><a href="#避免上传后台而实时跟新-android-机里面的逻辑为最新" class="headerlink" title="避免上传后台而实时跟新 android 机里面的逻辑为最新"></a><strong>避免上传后台而实时跟新 android 机里面的逻辑为最新</strong></h2><p><a href="https://blog.csdn.net/zyw_java/article/details/80203707">参考文档</a><br>这个讲解的也很详细 ,,, 我就不重复造轮子了.<br><img src="/posts/dd666e1a/9.png" title="android 测试"><br><img src="/posts/dd666e1a/10.png" title="android 测试"></p><blockquote><p>我到现在都还不知道怎么看 log 哪位大神知道 可以在下面评论 我加 QQ ,, 请教请教.</p></blockquote><h2 id="实现厘米秀大部分功能"><a href="#实现厘米秀大部分功能" class="headerlink" title="实现厘米秀大部分功能"></a><strong>实现厘米秀大部分功能</strong></h2><p><a href="https://blog.csdn.net/zyw_java/article/details/82964711">参考文章</a><br><a href="https://hudong.qq.com/docs/engine/">官方文档</a><br>程序员主要是一些细节,,,可能会困扰你,这里我就不说啥了,,,官方也提供的挺详细的,,,你也可以借鉴.<br><a href="/posts/dd666e1a/QQPlay.js.txt" title="QQPlay.js.txt">QQPlay.js.txt</a><br>我这里在提供一份我封装好的 里面(获取 openId, 获取QQ名字, 获取QQ头像地址, 分数上传, 获取好友分数排行榜, 各个时间点的绑定, 公众号跳转, 分享, 分享链接, 生成快捷方式传参, 储存/读取个人云端数据,存储游戏数据到本地,获取openkey,创建 banner广告, 创建激励视频广告, Post 请求)<br>还有一些功能 未完成(暂时项目没有需求就写, 后面会持续更新);</p><h2 id="关于获取每个游戏用户的-openkey-的获取问题"><a href="#关于获取每个游戏用户的-openkey-的获取问题" class="headerlink" title="关于获取每个游戏用户的 openkey 的获取问题"></a><strong>关于获取每个游戏用户的 openkey 的获取问题</strong></h2><p>获取 openkey 是验证当前用户是否是手Q环境,,,避免有些模拟请求,,,使其更安全.</p><p>这个 openkey 比较的坑,,, 这是官方文档<br><img src="/posts/dd666e1a/11.png" title="获取openkey"><br>你会发现 这里面 没啥 这个 game.json 是个啥东西,,, needOpenkey 又是个啥 ,,, 然后点击游戏上架章节 嗯哼 Not Found ,,, 于是 又去找了找,<br><img src="/posts/dd666e1a/12.png" title="获取openkey"><br>你会发现这里还有点提示信息 到最后也没说 到底要放在哪里?</p><p>解决方案:<br>在和gameConfig.json 同目录里面 创建一个 game.json 文件 里面内容为<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"needOpenkey"</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后随同到包内.</p><p>然后就是调用<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">BK.QQ.fetchOpenKey(<span class="function"><span class="keyword">function</span> (<span class="params">errCode, cmd, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (errCode == <span class="number">0</span>) &#123;</span><br><span class="line">         <span class="keyword">var</span> openKey = data.openKey;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>这个借口去获取用户的 openkey</p>]]></content>
      
      <categories>
          
          <category> QQ玩一玩 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cocos creator </tag>
            
            <tag> QQ玩一玩 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>微信小游戏记录长连接(websocket)</title>
      <link href="//posts/ba881459/"/>
      <url>//posts/ba881459/</url>
      <content type="html"><![CDATA[<p>哎,距离上次写博客竟然一个月了,真是时间不等人呀,好了废话不多说,直接进入正题.<br>今天主要记录这几个问题:</p><ul><li>websocket 端口问题,</li><li>http(短连接) 端口问题,</li></ul><p>由于公司的云服务器都是使用的是阿里云,但是小游戏是腾讯的,腾讯云又推出了一堆有利于小游戏的服务,但是我们用不来了,那就自己去解决里面会遇到的问题,<br><a id="more"></a></p><h2 id="websocket-端口问题"><a href="#websocket-端口问题" class="headerlink" title="websocket 端口问题"></a>websocket 端口问题</h2><p>在微信小游戏里面所有用户的逻辑服务器或者是资源服务器 都是需要在微信公众平台配置服务器信息,但是微信是只要求使用 wss 协议 而且还必须是443端口,这就会暴露出一个问题,因为 https 写协议也是 443 端口,, 这就会出现端口占用问题?</p><p>解决的方案 使用 nginx 反向代理功能, 主要的思路就是 让 nginx 占用443 端口,然后在由 nginx 去分发不同的请求.</p><p>这里也没有什么好讲的吧 ,, 主要是 nginx 的配置表需要配置正确, 就可以实现上述的功能,这里就去讲解一下那个配置表要配置的东西,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># 将 http 连接升级</span><br><span class="line">map $http_upgrade $connection_upgrade &#123;</span><br><span class="line">    default upgrade;</span><br><span class="line">    &apos;&apos; close;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 这个 配置反向代理的地址</span><br><span class="line">upstream websocket &#123;</span><br><span class="line">    server 127.0.0.1:3000;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    # 开启 443 端口监听</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    ...</span><br><span class="line">    # 配置证书  这个是需要你自己的ssl证书</span><br><span class="line">    ssl_certificate *.crt</span><br><span class="line">    ssl_certificate_key *.key</span><br><span class="line"></span><br><span class="line">    # 这几个 也需要配置 , 这个我 还没有 特备的清楚具体的作用, 暂时就先不解释了</span><br><span class="line">    ssl_session_timeout 5m;</span><br><span class="line">    ssl_session_cache shared:SSL:50m;</span><br><span class="line">    ssl_protocols TLSV1.1 TLSV1.2 SSLv2 SSLv3;</span><br><span class="line">    ssl_ciphers ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;</span><br><span class="line">    ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">    location /wss&#123;</span><br><span class="line">                proxy_pass https://websocket/;   # 代理到上面的地址去</span><br><span class="line">                proxy_http_version 1.1;</span><br><span class="line">                # 协议升级</span><br><span class="line">                proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">                proxy_set_header Connection &quot;Upgrade&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后 运行 nginx -t 去检查语法是否有误</p><p>如果没有出现错误 ,,, 就 nginx -s reload // 重启</p><p>然后你就可以 使用 http https wss 协议了<br>wss://localhost/wss<br><a href="https://localhost/">https://localhost/</a><br><a href="http://localhost/">http://localhost/</a></p><h2 id="http-短连接端口问题"><a href="#http-短连接端口问题" class="headerlink" title="http 短连接端口问题"></a>http 短连接端口问题</h2><p>微信小游戏短连接是使用的是 https 协议 一般 https 的默认端口是 443 , 一般你在浏览器没有加端口,那是浏览器默认为443 ,,, 但是前面说了可以使用 nginx 来实现反向代理的问题, 如果是短连接的话 有个简单的 方法 ,, 经过我测试, 在微信后台配置其他端口在手机上是可以访问,所以 如果项目只是 短连接请求的话可以直接在后台配置你服务器开启的端口,这种方法只适用于 短连接,,, 长连接是不行, 长连接在 后台配置 会出现 在 微信开发工具上测试正常,到手机上测试会出现操作失败的错误,,,而且也连接不上.</p><p>好了,这篇文章就先这样. 我也不想 让文章的篇幅过长.</p>]]></content>
      
      <categories>
          
          <category> 微信小游戏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小游戏 </tag>
            
            <tag> websocket </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>微信小游戏接入广告</title>
      <link href="//posts/967bbd27/"/>
      <url>//posts/967bbd27/</url>
      <content type="html"><![CDATA[<p>今天主要更新微信小游戏广告接入问题… 微信小游戏现在已经开始对外测试了,只要你的 UV(累计用户超过1000) 且没有违规行为,就可以填写个人信息,如,个人银行卡相关信息等,然后提交审核.如果接过广告的程序员,应该都知道在接入广告的时候需要先创建广告位,产生相关id.<br><a id="more"></a><br>大致流程</p><p>满足条件 –&gt; 填写个人信息 –&gt; 提交申请 –&gt; 在微信后台创建广告位 –&gt; 游戏前端添加<br>相应的代码逻辑</p><h2 id="填写个人信息"><a href="#填写个人信息" class="headerlink" title="填写个人信息"></a><strong>填写个人信息</strong></h2><p>主要需要填写银行相关信息,账单流水邮件接收人的相关信息,,,这里我截图了,放在公司了,后面补上.</p><h2 id="创建爱你广告位"><a href="#创建爱你广告位" class="headerlink" title="创建爱你广告位"></a><strong>创建爱你广告位</strong></h2><img src="/posts/967bbd27/1.png" title="广告位截图"><p>这里主要是广告的类型,,,目前下游戏提供的广告类型,,,只有横幅广告 和 激励广告</p><p>横幅广告:<br>    1.一般放在游戏的下方和游戏弹窗触发的情境下<br>    2.横幅广告组件一旦被创建里面的广告内容不会被更新,如果需要更新内容需要,需要将当前组件销毁,重新创建新的组件<br>    3.需要自己去放置位置,这里需要自己去计算位置和缩放和适配,计算不好会遮挡按钮,这个会违反微信小游戏广告规范,这样会有封号,或者是账号被冻结的问题.</p><p>激励广告:<br>    1.这个一般是全屏,不需要自己去考虑组件的位置等等<br>    2.主要运用的场景是游戏复活,获取积分,获取道具,获取新关卡机会等等<br>    3.主要负责视频是否播放完毕</p><h2 id="客户端逻辑实现"><a href="#客户端逻辑实现" class="headerlink" title="客户端逻辑实现"></a><strong>客户端逻辑实现</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 展示横幅广告</span></span><br><span class="line">showAD() &#123;</span><br><span class="line">        <span class="keyword">if</span>(CC_WECHATGAME &amp;&amp; wx &amp;&amp; <span class="keyword">typeof</span>(wx.createBannerAd) != <span class="literal">undefined</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.destroyAd()</span><br><span class="line">            <span class="comment">// 横幅广告接入</span></span><br><span class="line">            <span class="keyword">let</span> bannerAd = wx.createBannerAd(&#123;</span><br><span class="line">                adUnitId: <span class="string">'adunit-68c37174ce72ce6b'</span>,</span><br><span class="line">                style: &#123;</span><br><span class="line">                    left: <span class="number">0</span>,</span><br><span class="line">                    top: <span class="number">0</span>,</span><br><span class="line">                    width: <span class="number">350</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="comment">// 一般放置屏幕的中下方</span></span><br><span class="line">            bannerAd.onResize(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                bannerAd.style.left = screenWidth / <span class="number">2</span> - bannerAd.style.realWidth / <span class="number">2</span> + <span class="number">0.1</span>;</span><br><span class="line">                bannerAd.style.top = screenHeight - bannerAd.style.realHeight + <span class="number">0.1</span>;</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 默认广告组件是关闭的</span></span><br><span class="line">            bannerAd.show()</span><br><span class="line">            <span class="keyword">this</span>._lastBannerAd = bannerAd</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 销毁横幅广告</span></span><br><span class="line">    destroyAd() &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>._lastBannerAd) &#123;</span><br><span class="line">            <span class="keyword">this</span>._lastBannerAd.destroy()</span><br><span class="line">            <span class="keyword">this</span>._lastBannerAd = <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 展示 激励广告</span></span><br><span class="line">    <span class="comment">// obj.success 广告展示完毕回调</span></span><br><span class="line">    <span class="comment">// obj.fail 广告展示中途被玩家给关闭会回调</span></span><br><span class="line">    showViewAd(obj)&#123;</span><br><span class="line">        <span class="keyword">if</span>(CC_WECHATGAME &amp;&amp; wx &amp;&amp; <span class="keyword">typeof</span>(wx.createRewardedVideoAd) != <span class="literal">undefined</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> videoAd = wx.createRewardedVideoAd(&#123;</span><br><span class="line">                adUnitId: <span class="string">'adunit-4db163908fba72f2'</span></span><br><span class="line">            &#125;)</span><br><span class="line">            </span><br><span class="line">            videoAd.load()</span><br><span class="line">            .then(<span class="function"><span class="params">()</span> =&gt;</span> videoAd.show())</span><br><span class="line">            .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// console.log(err.errMsg)</span></span><br><span class="line">                videoAd.load.then(<span class="function"><span class="params">()</span> =&gt;</span> videoAd.show())</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">            videoAd.onClose(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (res &amp;&amp; res.isEnded || res === <span class="literal">undefined</span>) &#123;</span><br><span class="line">                    <span class="comment">// 正常播放结束，可以下发游戏奖励</span></span><br><span class="line">                    <span class="keyword">if</span>(obj.success) &#123;</span><br><span class="line">                        obj.success(res)</span><br><span class="line">                    &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">                  <span class="keyword">else</span> &#123;</span><br><span class="line">                      <span class="comment">// 播放中途退出，不下发游戏奖励</span></span><br><span class="line">                      <span class="keyword">if</span>(obj.fail) &#123;</span><br><span class="line">                          obj.fail()</span><br><span class="line">                      &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">            videoAd.onError(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'错误'</span>,res)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            T.showTips(<span class="string">'微信版本过低,请升级使用'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p>客户端的代码比较的简单,代码里都有注释,这里就不做过多的解释了.</p>]]></content>
      
      <categories>
          
          <category> 微信小游戏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小游戏 </tag>
            
            <tag> 广告 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>微信小游戏开发问题总结</title>
      <link href="//posts/4ec7de9/"/>
      <url>//posts/4ec7de9/</url>
      <content type="html"><![CDATA[<p>最近一个月有点忙呵,都没有时间写博客,今天就抽出一点时间记录一下这一个月中我开发过程遇到的问题,顺便记录一下微信小游戏开发过程中遇到的问题.<br><a id="more"></a></p><p>今天就接着,上面写的发布流程,接着写会面临的问题吧.</p><h2 id="更新新版本问题"><a href="#更新新版本问题" class="headerlink" title="更新新版本问题"></a><strong>更新新版本问题</strong></h2><p>你的游戏上线后,首先面临的一个问题就是,游戏更新逻辑问题,比如提示玩家更新游戏到最新的游戏版本.这里就直接使用小游戏提供的API.</p><p>我这里废话不多说直接给你们参考代码.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">checkNewVersion() &#123;</span><br><span class="line">            <span class="keyword">if</span> (CC_WECHATGAME &amp;&amp; <span class="keyword">typeof</span> wx.getUpdateManager === <span class="string">'function'</span>) &#123;</span><br><span class="line">                <span class="keyword">const</span> updateManager = wx.getUpdateManager()</span><br><span class="line"> </span><br><span class="line">                updateManager.onCheckForUpdate(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;&#125;)</span><br><span class="line"> </span><br><span class="line">                updateManager.onUpdateReady(<span class="function"><span class="keyword">function</span> (<span class="params"> res </span>) </span>&#123;</span><br><span class="line">                    wx.showModal(&#123;</span><br><span class="line">                        title: <span class="string">'更新提示'</span>,</span><br><span class="line">                        content: <span class="string">'新版本来袭，是否重启应用？'</span>,</span><br><span class="line">                        success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">                          <span class="keyword">if</span> (res.confirm) &#123;</span><br><span class="line">                            updateManager.applyUpdate()</span><br><span class="line">                          &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                      &#125;)</span><br><span class="line">                &#125;)</span><br><span class="line"> </span><br><span class="line">                updateManager.onUpdateFailed(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;)</span><br><span class="line">              &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>这里主要是用到了微信交互控件中的 showModal . 这个函数 直接就是在启动应用的时候直接调用.检测是否有新版本.</p><h2 id="微信用户拒绝授权问题"><a href="#微信用户拒绝授权问题" class="headerlink" title="微信用户拒绝授权问题"></a><strong>微信用户拒绝授权问题</strong></h2><p>还是直接上代码,说的多,不如自己看明白是怎么回事.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">getUserInfo(func_) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">this</span>.checkIsWeChat()) &#123;<span class="keyword">return</span>;&#125;</span><br><span class="line">        wx.getUserInfo(&#123;</span><br><span class="line">            withCredentials : <span class="literal">false</span>,</span><br><span class="line">            success: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> userInfo = res.userInfo</span><br><span class="line">                <span class="comment">// 授权成功</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// avatarUrl</span></span><br><span class="line">                <span class="comment">// nickName</span></span><br><span class="line">                <span class="comment">// gender //性别 0：未知、1：男、2：女</span></span><br><span class="line">                <span class="comment">// province 省</span></span><br><span class="line">                <span class="comment">// city</span></span><br><span class="line">                <span class="comment">// country</span></span><br><span class="line">            &#125;,</span><br><span class="line">            fail: <span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">                <span class="comment">// 未授权 处理</span></span><br><span class="line">                wx.showModal(&#123;</span><br><span class="line">                    title: <span class="string">'温馨提示'</span>,</span><br><span class="line">                    content: <span class="string">'为了良好的体验,请开启用户信息授权'</span>,</span><br><span class="line">                    success: <span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">                        <span class="keyword">if</span>(res.confirm || res.cancel) &#123;</span><br><span class="line">                            <span class="keyword">let</span> button = wx.createOpenSettingButton(&#123;</span><br><span class="line">                                type: <span class="string">'text'</span>,</span><br><span class="line">                                text: <span class="string">'打开设置页面'</span>,</span><br><span class="line">                                style: &#123;</span><br><span class="line">                                    left: <span class="number">10</span>,</span><br><span class="line">                                    top: <span class="number">76</span>,</span><br><span class="line">                                    width: <span class="number">170</span>,</span><br><span class="line">                                    height: <span class="number">40</span>,</span><br><span class="line">                                    lineHeight: <span class="number">40</span>,</span><br><span class="line">                                    backgroundColor: <span class="string">'#4b6881'</span>,</span><br><span class="line">                                    color: <span class="string">'#ffffff'</span>,</span><br><span class="line">                                    textAlign: <span class="string">'center'</span>,</span><br><span class="line">                                    fontSize: <span class="number">16</span>,</span><br><span class="line">                                    borderRadius: <span class="number">4</span></span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;)</span><br><span class="line">                            button.show()</span><br><span class="line">                            button.onTap(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                                wx.getSetting(&#123;</span><br><span class="line">                                    success: <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                                        button.destroy()</span><br><span class="line">                                        <span class="keyword">if</span>(res.authSetting[<span class="string">'scope.userInfo'</span>]) &#123;</span><br><span class="line">                                            wx.getUserInfo(&#123;</span><br><span class="line">                                                withCredentials : <span class="literal">false</span>,</span><br><span class="line">                                                success: <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                                                    <span class="keyword">let</span> info = res.userInfo</span><br><span class="line">                                                    KUN.Server.uploadUserData(<span class="built_in">JSON</span>.stringify(info),res=&gt;&#123;</span><br><span class="line">                                                        <span class="keyword">if</span>(res == <span class="string">'1'</span>) &#123;</span><br><span class="line">                                                            func_()</span><br><span class="line">                                                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                                            <span class="comment">// 暂时不做处理</span></span><br><span class="line">                                                        &#125;</span><br><span class="line">                                                    &#125;)</span><br><span class="line">                                                &#125;</span><br><span class="line">                                            &#125;)</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;)</span><br><span class="line">                            &#125;)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure></p><p>这里面就随便讲解一下,主要是用到了这个api<code>wx.createOpenSettingButton</code>,在现在的微信小游戏的文档里面没有 按钮事件响应的方法名,我这里处理的方法是在模拟器中把button打印出来然后看里面的详细属性和方法,我这里发现了一个叫 <code>onTap</code>.</p><p>主要的思路是</p><p>首次进入游戏 -&gt; 用户拒绝授权 -&gt; 获取用户信息失败 -&gt; 创建打开时设置的按钮 -&gt; 绑定监听事件(onTap) -&gt; 再次处理获取用户信息的逻辑.</p><h2 id="小游戏跳转功能"><a href="#小游戏跳转功能" class="headerlink" title="小游戏跳转功能"></a><strong>小游戏跳转功能</strong></h2><p>最近小游戏又更新了一下,出现了一个小程序跳转功能,主要的API 是<br><a href="https://developers.weixin.qq.com/minigame/dev/document/open-api/miniprogram-navigate/wx.navigateToMiniProgram.html">wx.navigateToMiniProgram</a></p><p>这里面你主要去填写 appid 和要跳转的发行版本 ,,, 其他的你可以去选择也可以不用选择.</p><p>还是老样子直接上代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span>(wx.navigateToMiniProgram) != <span class="string">'undefined'</span>) &#123;</span><br><span class="line">    wx.navigateToMiniProgram(&#123;</span><br><span class="line">        appId: <span class="string">'xxxx'</span>,</span><br><span class="line">        path: <span class="string">''</span>, <span class="comment">// 这个可以填写个空.</span></span><br><span class="line">        <span class="comment">// extarData: &#123;</span></span><br><span class="line">        <span class="comment">//   open: ''</span></span><br><span class="line">        <span class="comment">// &#125;,</span></span><br><span class="line">        envVersion: <span class="string">'release'</span>,</span><br><span class="line">        success(res) &#123;</span><br><span class="line">            <span class="comment">// 打开成功</span></span><br><span class="line">        &#125;,</span><br><span class="line">        fail(res) &#123;</span><br><span class="line">            <span class="comment">// 打开失败</span></span><br><span class="line">        &#125;                                         </span><br><span class="line">    </span><br><span class="line">    &#125;)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">// 提示用户微信版本过低</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="小游戏推广中遇到的错误"><a href="#小游戏推广中遇到的错误" class="headerlink" title="小游戏推广中遇到的错误"></a><strong>小游戏推广中遇到的错误</strong></h2><p>在我这篇博客没有写完之前就收到了 boss 的微信消息,说用户进不去了,黑屏了,我是一脸蒙蔽,测试完全没有问题,去推广的时候就出现问题了, </p><p>主要是以下几个问题(我只是记录我遇到问题,希望能够对你有帮助,只是说作参考吧,我也是一点点去采坑,一点点去记录.o(<em>￣︶￣</em>)o(持续更新中))</p><p>1.用户的微信小游戏版本太低,导致你使用微信最新api时候报错.</p><pre><code>只要在调用该API的时候 加一个判断 typeof(你要调用的小游戏的函数) != undefined,即可</code></pre><p>2.服务器地址配置 https协议只能是 443 吗?</p><pre><code>经过我测试,不是的只要你在小程序后台配置 类似这样的格式其实也是可以的 这样就可以去访问 服务器其他的端口了 https://xxx.com:8080</code></pre><blockquote><p>我这里说明一下,我没有去测试 websocket 因为现在业务还没有这方面的业务.有的小伙伴可去测试一下,可以告诉我一声.谢谢.</p></blockquote><p>暂时先写到这里,后面这个我会持续更新的,如有不对欢迎指正.</p>]]></content>
      
      <categories>
          
          <category> 微信小游戏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小游戏 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>微信小游戏发布流程</title>
      <link href="//posts/da41a120/"/>
      <url>//posts/da41a120/</url>
      <content type="html"><![CDATA[<p>今天主要说一下微信小游戏发布流程吧,这篇文章不会写的太长,涉及的东西不多.</p><ul><li>个人发布 和 企业发布的流程</li><li>代码上传的注意的问题</li><li>代码审核会出现的问题<a id="more"></a></li></ul><p>#<em>个人发布和企业发布</em></p><blockquote><p>这里的个人发布和企业发布是 取决于 你注册这个公众号时 绑定的主体信息是 个人还是企业</p></blockquote><h2 id="个人发布"><a href="#个人发布" class="headerlink" title="个人发布"></a><em>个人发布</em></h2><p>个人发布时需要 两份材料 和一个 苹果的开发者账号</p><p>个人准备:</p><pre><code>- 游戏自审查报告- 计算机软件著作权登记书(简称 软著)- Apple ID (苹果开发者账号)</code></pre><img src="/posts/da41a120/1.png" title="发布信息截图1"><img src="/posts/da41a120/2.png" title="发布信息截图2"><p>1.最上面就是你最基础的配置信息,你的游戏类型,你使用的游戏引擎,<br>2.然后就是上传 刚才提到的那两份材料.<br>3.填写你本次跟新的内容.<br>4.如果你的游戏自己账号系统,需要提供一份给微信团队做测试的账号,密码,没有可以不填写.<br>5.最后一项 Apple ID(必须是开发者账号).</p><blockquote><p>至于怎么申请 成为 苹果的开发者 上百度自己查</p></blockquote><h2 id="企业发布"><a href="#企业发布" class="headerlink" title="企业发布"></a><em>企业发布</em></h2><p>整体流程同上但是比上面多要两份材料</p><p>企业需要:</p><pre><code>- 游戏自审查报告- 计算机软件著作权登记书(简称 软著)- 广电总局版号批文(简称版号)- 文化部备案信息- Apple ID (苹果开发者账号)</code></pre><img src="/posts/da41a120/3.png" title="发布信息截图3"><h2 id="差异"><a href="#差异" class="headerlink" title="差异"></a><em>差异</em></h2><p>如果是以个人发布的话 你的权限会受到影响,个人不支持内置支付,唯一盈利的途径就是接入广告,</p><p>以企业发布 可以接入支付 , 但是 需要版号(申请时间周期长) , 比较的麻烦</p><p>上面的信息 填写完毕后 可以直接提交发布.</p><h1 id="代码上传的注意的问题"><a href="#代码上传的注意的问题" class="headerlink" title="代码上传的注意的问题"></a><em>代码上传的注意的问题</em></h1><p>你只有提交代码后才可以向微信提交审核,</p><p>上传代码的步骤很简单, 打开你的微信开发者工具 点击上传<br><img src="/posts/da41a120/4.png" title="上传代码"></p><p>然后会弹出如下的弹窗<br><img src="/posts/da41a120/5.png" title="上传代码"></p><p>填写你的这次的版本信息 和 这次游戏更新的内容或则是修复的bug</p><p>这里如果是使用 cocos creator 的话 ,,由于creator的js文件过大 导致 ES6 转换成 ES5 失败 ,你可以自己在网上找 软件去解决这个问题 ,, 当然也可以先直接提交. ,, 这个问题不大,, </p><p>然后在微信后台 的 <code>开发管理里面</code> 会有你提交的小游戏版本信息 ,</p><p>这里你可以把你刚才提交的小游戏设置为体验版本,这样做的好处是,产生的二维码不会过期.</p><img src="/posts/da41a120/6.png" title="后台版本信息"><blockquote><p>这里需要注意的是,你每次上传代码都会覆盖掉后台上已经存在的版本,也就是说你的后台,只能存在一个版本.不会同时出现多个不同的版本.</p></blockquote><h1 id="代码审核会出现的问题"><a href="#代码审核会出现的问题" class="headerlink" title="代码审核会出现的问题"></a><em>代码审核会出现的问题</em></h1><ol><li>代码审核不通过<br> 原因出现 可能是出现诱导分享,如果是这种原因,不可怕, 具体的做法就是 ,将微信团队反馈出来截图中涉及到诱导到分享的功能 的控制权全部移交到后端,<br> 就是每次游戏启动的时候都会想后端 请求一次数据 ,, 访问是否开启某个模块,在审核的时候将这些模块在后台关掉,审核通过后再在后台打开,就行了.</li></ol>]]></content>
      
      <categories>
          
          <category> 微信小游戏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小游戏 </tag>
            
            <tag> cocos creator </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>微信小游戏开发记录</title>
      <link href="//posts/777fe656/"/>
      <url>//posts/777fe656/</url>
      <content type="html"><![CDATA[<p>刚换个新工作,是做微信小游戏的.已经好长时间没有写一些东西了,今天就在这总结一下我这个月的做的事吧,我也是刚使用 <code>cocos creator</code> 时间不长,以前一直用的是 <code>cocos2dx-lua</code> ,写的不好请多多指教,好了废话不多说.</p><p>本片文章主要是对微信小游戏开发和总结.<br>引擎: cocos creator<br>发布平台: 微信小游戏(微信sdk ver:2.1.1)</p><p>本文大纲</p><ul><li>使用 <code>cocos creator</code> 引擎发布到微信上</li><li>记录调用微信 API 的记录</li><li>微信排行榜实现(开放数据域的使用)</li><li>在开发过程中遇到的问题</li></ul><a id="more"></a><h1 id="发布"><a href="#发布" class="headerlink" title="发布"></a><em>发布</em></h1><p>这里首先要准备的东西是:</p><ul><li>appid</li><li>你的游戏工程</li><li>微信开发工具</li></ul><p>appid:<br>是你注册微信小程序公众号时候能够得到的,这个是你发布的时候要用的东西,当然你也可以使用 cocos creator 提供的默认的账号,(使用这个账号的弊端是你项目相关人员没办法测试,只有你的微信账号可以做测试)<br><a href="https://developers.weixin.qq.com/minigame/introduction/index.html#%E5%BC%80%E9%80%9A%E8%99%9A%E6%8B%9F%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98">微信团队注册和接入微信小游戏的教程</a><br>在这里注册你的微信公众号账号 <a href="https://mp.weixin.qq.com/">微信公众平台</a>在这里选择小程序进行注册,然后按照流程进行注册,你可以是个体,也可以是以企业身份进行注册,(个人注册在后期发布上线的时候要做的事情比较少,企业注册就需要东西比个人多两样,后面详细介绍.)</p><img src="/posts/777fe656/2.png" title="注册类型"><p>一般这些东西注册比较简单,这里就仔细叙述了,如果你是管理员的话,你可微信扫码直接登录,如果不是可以让管理员给你直接加一下权限.</p><img src="/posts/777fe656/3.png" title="成员权限"><p>你需要配置的信息如下:</p><img src="/posts/777fe656/4.png" title="小游戏配置信息"><p>这里要注意的就是我第二张图里面指向的地方, 这些你都填写完毕后就可以拿到 appid 了,有了这个id后你可以给其他的项目相关测试人员在微信后台添加 成员并给他们相应的权限,这样他们也可以进行测试你现在开发的小游戏了.</p><img src="/posts/777fe656/6.png" title="小游戏的appid"><p>然后在 cocos creator 引擎中去填写,</p><img src="/posts/777fe656/7.png" title="发布设置"><p>我这里指向了几个地方,这里你们要是明白的话就更好,要是不明白,先这样做,我只是不想要这篇文章篇幅过长.</p><p>至于下面的 开放数据域, 服务器地址, 现在可以先不配置, 到后面我会去介绍的.</p><p>在这里再说一下,在点击运行的时候需要先配置,微信开发工具,<br><a href="https://developers.weixin.qq.com/minigame/dev/devtools/download.html">微信开发工具 download</a></p><img src="/posts/777fe656/8.png" title="微信开发工具配置"><blockquote><p>那里面有配置的完整路径.^-^</p></blockquote><p>然后引擎会在构建完成之后,点击运行,微信开发者工具启动后,点击预览会生成一个二维码,然后在微信后台,成员管理里面的成员只要有测试权限的都可以通过这个二维码进行游戏测试.</p><img src="/posts/777fe656/9.png" title="编译预览"><p>好了到这里你就发布成功了.</p><p><a href="http://docs.cocos.com/creator/manual/zh/publish/publish-wechatgame.html">这个是 cocos creator 官方团队提供发布微信小游戏的教程</a></p><p>如果运行出现错误可以到这里看看有没有<a href="http://forum.cocos.com/t/faq/54828">微信小游戏问题总汇</a></p><p>#<em>微信小游戏API</em></p><p><a href="https://developers.weixin.qq.com/minigame/dev/document/render/canvas/wx.createCanvas.html">微信小游戏API</a><br><a href="https://developers.weixin.qq.com/minigame/dev/">微信小游戏文档</a></p><p>这里只是演示 cocos creator 是怎么调用微信小游戏的 api,复杂的调用我就先不说了.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">argument</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// CC_WECHATGAME 这个是 creator 全局宏用来判断是否在微信小游戏环境下</span></span><br><span class="line">    <span class="keyword">if</span>(CC_WECHATGAME)&#123;</span><br><span class="line">        wx.login(&#123;</span><br><span class="line">            success: <span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// 调用成功后回调</span></span><br><span class="line">                wx.getUserInfo(&#123;</span><br><span class="line">                    success: <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(res)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;,</span><br><span class="line">            fail: <span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// 调用失败后回调</span></span><br><span class="line">            &#125;,</span><br><span class="line">            complete: <span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// 成功失败都会调用</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#<em>微信开放数据域</em></p><p>微信的开放数据域要求,解释起来比较复杂,我先给你提供微信官方的解释,和creator 团队做出的解释和例子.</p><p><a href="https://developers.weixin.qq.com/minigame/dev/tutorial/open-ability/open-data.html">微信的解释</a><br><a href="http://docs.cocos.com/creator/manual/zh/publish/publish-wechatgame-sub-domain.html">creator团队的解释</a></p><p>相信你看完这两个解释,会有一些概念了,这里我就开始直接上代码,这个是最直接.</p><p>这个是主域渲染的代码<br>sharedCanvas 是微信提供的全局变量,在微信环境下有用,当然这个是有开放数据域的工程后才行.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">cc.Class(&#123;</span><br><span class="line">    extends: cc.Component,</span><br><span class="line"></span><br><span class="line">    properties: &#123;</span><br><span class="line">        rankView: cc.Sprite,</span><br><span class="line">    &#125;,</span><br><span class="line">    onLoad() &#123;</span><br><span class="line">        <span class="keyword">if</span> (CC_WECHATGAME) &#123;</span><br><span class="line">            <span class="keyword">this</span>.tex = <span class="keyword">new</span> cc.Texture2D()</span><br><span class="line">            <span class="built_in">window</span>.sharedCanvas.width = <span class="number">720</span></span><br><span class="line">            <span class="built_in">window</span>.sharedCanvas.height = <span class="number">1280</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    update() &#123;</span><br><span class="line">        <span class="keyword">this</span>._updateSubDomainCanvas()</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 刷新子域的纹理</span></span><br><span class="line">    _updateSubDomainCanvas() &#123;</span><br><span class="line">        <span class="keyword">if</span> (CC_WECHATGAME) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">window</span>.sharedCanvas != <span class="literal">undefined</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.tex.initWithElement(<span class="built_in">window</span>.sharedCanvas)</span><br><span class="line">                <span class="keyword">this</span>.tex.handleLoadedTexture()</span><br><span class="line">                <span class="keyword">this</span>.rankView.spriteFrame = <span class="keyword">new</span> cc.SpriteFrame(<span class="keyword">this</span>.tex)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>发送发送数据的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个是上传分数的一段代码</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* @param score_ 要上传的分数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">uploadScore(score_)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">this</span>.checkIsWeChat()) &#123;<span class="keyword">return</span>;&#125;</span><br><span class="line">    GameTools.sendMessage(&#123;</span><br><span class="line">        type: GameTools.msgType.submitScore,</span><br><span class="line">        scoreData: &#123;</span><br><span class="line">            key: cc.TB.GAME.weChatData.keyList[<span class="number">0</span>],</span><br><span class="line">            score: score_,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这类型和开放数据域那里的类型保持一致就行了.</span></span><br><span class="line">msgType: &#123;</span><br><span class="line">    clear: <span class="number">0</span>,</span><br><span class="line">    updateRank: <span class="number">1</span>,</span><br><span class="line">    submitScore: <span class="number">2</span>,</span><br><span class="line">    updateSelfRank: <span class="number">3</span>,</span><br><span class="line">    groupShare: <span class="number">4</span>,</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个是调用微信的API 给开放数据域发送数据的 API</span></span><br><span class="line">sendMessage(data) &#123;</span><br><span class="line">    <span class="keyword">if</span>(CC_WECHATGAME) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'send sub content data'</span>);</span><br><span class="line">        <span class="keyword">let</span> content = <span class="built_in">window</span>.wx.getOpenDataContext();</span><br><span class="line">        content.postMessage(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>开放数据域的代码</p><p>这里我直接放一个文件的链接,我就不接去部分代码了,你可以直接修改然后自己使用.</p><p>开放数据域代码</p><a href="/posts/777fe656/openContentData.txt" title="openContentData.txt">openContentData.txt</a><p>这里在你发布开放数据域的工程的时候</p><img src="/posts/777fe656/10.png" title="开放数据域的配置"><blockquote><p>好了开放数据域 介绍结束 ^-^</p></blockquote><p>#<em>问题记录</em></p><p>1.游戏包体超过4M</p><blockquote><p>1.将你的资源放置服务器,在微信开放平台后端配置你的服务器地址,这里注意微信是不支持直接填写ip,而且还必须是https协议.</p><p>2.最近微信出现个分包加载机制,也可以突破微信不能超过4M的机制,这个我还没有实际实现过就先不写做法了,</p></blockquote><p>2.微信小游戏分享传参问题<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">wx.shareAppMessage(&#123;</span><br><span class="line">    title: <span class="string">'跟我一起玩'</span>,</span><br><span class="line">    query: <span class="string">'invite=1&amp;wc=2'</span>,</span><br><span class="line">    imageUrl: address + <span class="string">'share.jpg'</span>,</span><br><span class="line">    success: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'分享 成功 '</span>, res);</span><br><span class="line">        <span class="keyword">if</span> (res.shareTickets != <span class="literal">undefined</span> &amp;&amp; res.shareTickets.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 这里主要是利用 query 这个字段进行参数传递</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// **********************************************</span></span><br><span class="line"><span class="comment">// 启动</span></span><br><span class="line"><span class="keyword">let</span> option = wx.getLaunchOptionsSync();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'小游戏启动'</span>,option);</span><br><span class="line"><span class="keyword">if</span>(option.shareTicket != <span class="literal">undefined</span>) &#123;</span><br><span class="line">    cc.TB.GAME.weChatData.shareTicket = option.shareTicket;</span><br><span class="line">    <span class="keyword">this</span>.onGroupShareFunc();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 由后台切换到前台是调用的函数</span></span><br><span class="line">wx.onShow(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// shareTicket</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'切换到前台'</span>,res);</span><br><span class="line">    <span class="keyword">if</span>(res.shareTicket)&#123;</span><br><span class="line">        cc.TB.GAME.weChatData.shareTicket = res.shareTicket;</span><br><span class="line">        <span class="comment">// 显示群排行</span></span><br><span class="line">        <span class="keyword">this</span>.onGroupShareFunc();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在这里 这个函数的返回值里 wx.getLaunchOptionsSync();</span></span><br><span class="line"><span class="comment">// 和 这个函数 wx.onShow() 回调里面会有刚才传进来的参数</span></span><br></pre></td></tr></table></figure></p><p>微信分享主要是利用 query 字段,这个字段类型是 string 只要按照这个格式就可以在在通过分享的链接进入游戏是获取相应参数的值.</p><p>好了,今天就先到这里了.</p>]]></content>
      
      <categories>
          
          <category> 微信小游戏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小游戏 </tag>
            
            <tag> cocos creator </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>解决运行exe时缺少dll问题</title>
      <link href="//posts/8e17853e/"/>
      <url>//posts/8e17853e/</url>
      <content type="html"><![CDATA[<p>今天主要是解决如果你使用 cocos2dx 做的游戏(exe) 要放到别人的电脑上运行问题,在有些时候你可能会将自己的exe放到别人的电脑上,但是不幸的是,运行不了,提示说找不到*.dll.<br> <a id="more"></a></p><h2 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a><strong>解决思路</strong></h2><p>1.你可能会直接去百度上下载一堆dll但是发现没什么用,还是会报错.那就看来这个思路是行不通的,换一个思路就是你去思考你的电脑比他电脑多了什么东西,其实也就是多了cocos2dx的运行框架,多了个VS.那既然我们已经将cocos2dx编译出来的和锁依赖的dll已经全部放在他的电脑上了,那就剩下个VS,这下目标很清晰喽,直接从VS下手,事实证明这是对的.</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a><strong>解决方案</strong></h2><p>1.去找VS的dll存放的地方,我这里就不找,直接利用电脑管家去全局搜索某个文件,如下图<br><img src="/posts/8e17853e/1.png" title="搜索dll的图片"></p><p>2.将你缺少的dll全部放在对方这个路径下<code>C:\Windows\SysWOW64</code></p><blockquote><p>Note:当然这里你怕放在这里影响其他的应用的话你也可以不放在,直接放在和你要运行的exe同级目录下就行.<br>我这里只是为了解决多人时出现的问题.</p></blockquote><p>3.copy你通过VS编译出来的exe和它所依赖的dll文件,具体目录在<code>~/simulator/win32/*</code>~代表你项目的根目录,然后将你项目根目录下的<code>src和res</code>文件夹拷贝到他的电脑上,其实就是将win32目录下的src和res给删除,将你项目根目录下的src和res放进去,为了只是保证资源和代码是最新的.</p><p>4.如果有人动了c++代码的话,你如果不是太了解C++中dll是干啥的就直接将自己<code>~/simulator/win32/*.dll</code>这个目录下的dll再重新覆盖一下.</p><p>好了就先到这里了.</p>]]></content>
      
      <categories>
          
          <category> cocos2dx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 缺少dll </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>给sublime写自定义的插件</title>
      <link href="//posts/b1de475b/"/>
      <url>//posts/b1de475b/</url>
      <content type="html"><![CDATA[<p>以前总是在sublime中装各种插件,去实现某种便捷,如装一个 git 插件可以直接快速的去查看当前打开的文件与远端的这个文件的差异.<br>但是这些插件总是满足不了你的欲望,有的时候在有一些奇葩的需求,可能没有现有的插件可用,这个时候就要自己去写插件了.<br><a id="more"></a><br>首先Sublime是支持自定义插件的,其次是Sublime的插件是采用python的语法,所以你要在写插件之前至少要了解python语法.不然就望而生畏了.</p><h2 id="第一步-创建python脚本文件"><a href="#第一步-创建python脚本文件" class="headerlink" title="第一步 创建python脚本文件"></a><strong>第一步 创建python脚本文件</strong></h2><p>直接打开 Sublime 在最上面工具栏中 找到 Tools/Developer/New Plugin</p><p>点击完成之后会有一个内容类似下面的未保存文件<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sublime</span><br><span class="line"><span class="keyword">import</span> sublime_plugin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleCommand</span><span class="params">(sublime_plugin.TextCommand)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, edit)</span>:</span></span><br><span class="line">        self.view.insert(edit, <span class="number">0</span>, <span class="string">"Hello, World!"</span>)</span><br></pre></td></tr></table></figure></p><p>关于 sublime 这两个包的 API可以去 <a href="http://www.sublimetext.com/docs/3/api_reference.html">SublimeAPI</a> 可能需要翻墙,我只是翻墙之后快了许多.</p><h2 id="第二步-填充自己的python文件并保存到相应位置"><a href="#第二步-填充自己的python文件并保存到相应位置" class="headerlink" title="第二步 填充自己的python文件并保存到相应位置"></a><strong>第二步 填充自己的python文件并保存到相应位置</strong></h2><img src="/posts/b1de475b/1.png" title="package path"><img src="/posts/b1de475b/2.png" title="package floder"><p>打开上面所指向的目录自己新建一个文件夹,和你那个User目录同级就行了.<br>列如我建立一个PythonHead 的目录如下:</p><img src="/posts/b1de475b/3.png" title="python head"><p>里面有个 head.py 的python文件,具体内容如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sublime</span><br><span class="line"><span class="keyword">import</span> sublime_plugin</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">str_head = <span class="string">"""#!usr/bin/env python2</span></span><br><span class="line"><span class="string">#-*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">#data:%s\n</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PyHeadCommand</span><span class="params">(sublime_plugin.TextCommand)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, edit)</span>:</span></span><br><span class="line">        self.view.insert(edit, <span class="number">0</span>,str_head % (datetime.datetime.now().strftime(<span class="string">"%y-%m-%d %H:%m:%s"</span>)))</span><br></pre></td></tr></table></figure><p>这个自定义的功能主要是给自己python文件定义加了一些通用的注释而已.<br>样子就如下面这样</p><img src="/posts/b1de475b/4.png" title="开头加自动加注释例子"><p>这一写完之后你可以直接打开 Sublime 的命令行 快捷键 ctrl+` 如果快捷键冲突可以直接 View/Show Console 这个也可以</p><p>直接在这里面输入如下代码</p><img src="/posts/b1de475b/5.png" title="打开Sublime的命令行"><p>就会向上面显示的那样.</p><p>当然这样肯定是不行的因为这个效率太低下,这里我们直接使用快捷键</p><h2 id="第三步-绑定快捷键"><a href="#第三步-绑定快捷键" class="headerlink" title="第三步 绑定快捷键"></a><strong>第三步 绑定快捷键</strong></h2><p>在上面的那个PyHead的文件夹下面有个 <code>Default (Windows).sublime-keymap</code> </p><blockquote><p>它这个分了一些平台 如 Default (OSX).sublime-keymap Default (Linux).sublime-keymap<br>这样的文件夹,这个是你绑定快捷键到你这个 功能上面.<br>里面的内容如下(使用json的数据格式):</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;<span class="attr">"keys"</span>: [<span class="string">"ctrl+alt+h"</span>], <span class="attr">"command"</span>: <span class="string">"py_head"</span>&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>如果不熟悉json的话可以自己去补一下.</p><p>前面这个定义快捷键,后面是你要调用的函数,这里你可能有疑问了,为啥定义是<code>PyHeadCommand</code> 这个名字 却写个这,<br>那是因为在Sublime中 函数的绑定都是小写, 如果你是大写就像上面那样驼峰式命名<br>在绑定的时候是以下划线开头在这个大写字母前面,然后全部小写.<br>举一个例子吧<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">如 函数名 PyHead  绑定的 command 是 py_head</span><br><span class="line">函数名 pyhead 绑定的 command 是 pyhead </span><br><span class="line">函数名 PYHead 绑定的 command 是 p_y_head</span><br></pre></td></tr></table></figure></p><p>这下应该明白了吧.</p><p>这样你就成功的写了一个 Sublime 插件的 hello world,如果你要写更厉害的插件你还得去学习 正则表达式,至于这个是啥怎么用自己去找,网上一大堆.</p><p>好了今天就先到这.有时间我在接着写一些其他的文档如 Sublime的API文档.</p>]]></content>
      
      <categories>
          
          <category> 插件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sublime插件 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>linux升级gcc</title>
      <link href="//posts/f62a7c7d/"/>
      <url>//posts/f62a7c7d/</url>
      <content type="html"><![CDATA[<p>这一篇是对linux centos7 中 gcc 的升级.<br>这次升级gcc的版本是 8.1.0<br><a id="more"></a></p><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a><strong>方法一</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ su \\进入 root</span><br><span class="line"># sudo yum install libmpc-devel mpfr-devel gmp-devel</span><br><span class="line">...</span><br><span class="line"># cd 下载</span><br><span class="line"># curl ftp://ftp.mirrorservice.org/sites/sourceware.org/pub/gcc/releases/*   \\* 号为自己想要更新的版本号</span><br><span class="line">\\ 做法是自己将这个 地址放到浏览器中自己去选取合适的版本直接下载.</span><br><span class="line">\\ 我这里下载的是 8.1.0 </span><br><span class="line"># tar zxfv gcc-8.1.0.tar.gz</span><br><span class="line"># cd gcc-8.1.0</span><br><span class="line"># ./configure --disable-multilib --enable-languages=c,c++</span><br><span class="line"># make -j 4</span><br><span class="line">...</span><br><span class="line"># make install</span><br><span class="line">...</span><br><span class="line"># gcc -v</span><br><span class="line">...</span><br><span class="line">线程模式:posix</span><br><span class="line">gcc 版本 8.1.0(GCC)</span><br><span class="line">\\ ... 意思省略</span><br></pre></td></tr></table></figure><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a><strong>方法二</strong></h2><p>在 etc/yum.repos.d下面添加repo<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch FedoraRepo.repo</span><br></pre></td></tr></table></figure></p><p>然后添加下面的内容:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[warning:fedora] </span><br><span class="line">name=fedora </span><br><span class="line">mirrorlist=http://mirrors.fedoraproject.org/mirrorlist?repo=fedora-23&amp;arch=$basearch </span><br><span class="line">enabled=1 </span><br><span class="line">gpgcheck=1 </span><br><span class="line">gpgkey=https://getfedora.org/static/34EC9CBA.txt</span><br></pre></td></tr></table></figure><p>然后更新gcc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y update gcc gcc-c++</span><br></pre></td></tr></table></figure><p>然后就是新版本了<br>但是这我还不太懂.所以就没有用这个方法.</p><blockquote><p>我用的是方法一.<br>因为方法一可以自己选择gcc版本,并不是所有的东西都要更新到最新的版本,当然这个根据你们自己了.<br>根据情况而定. 方法二更简单一点.</p></blockquote><p>好了今天就先到这了.</p>]]></content>
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gcc </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>9宫格纹理的更新问题</title>
      <link href="//posts/1e09c0f5/"/>
      <url>//posts/1e09c0f5/</url>
      <content type="html"><![CDATA[<p>这一篇文章主要是讲解一下 cocos2dx 9宫格纹理更新问题<br><a id="more"></a><br>我这里就不说 cocos2dx 9宫格怎么使用了。在网上一搜一大堆。基本内容都是那样。我不想做无谓的叙述了。</p><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><p>现在的环境是：<br>    cocos2dx 3.15<br>    VS 2015<br>    使用 lua 写项目</p><blockquote><p>注意这里是说使用 plist 里面的纹理 也就是精灵帧</p></blockquote><p>现在面临的问题是: cocos2dx 对9宫格纹理更新，不能像更新精灵那样使用它提供的函数 <code>setSpriteFrame</code><br>虽然9宫格就是对精灵的在次封装。 </p><p>cocos2dx 九宫格的这个函数（setSpriteFrame）在C++定义的头文件中是长这样的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// UIScale9Sprite.h</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">setSpriteFrame</span><span class="params">(SpriteFrame * spriteFrame, <span class="keyword">const</span> Rect&amp; capInsets)</span></span>;</span><br><span class="line"><span class="comment">//它没有提供直接输入字符串来实现纹理的更换.</span></span><br></pre></td></tr></table></figure><p>这说明我们需要一个精灵帧类型，但是这个类型我用了这么时间，基本没用过。</p><h2 id="问题剖析"><a href="#问题剖析" class="headerlink" title="问题剖析"></a><strong>问题剖析</strong></h2><p>我上面有说过九宫格是对纹理的再次封装实现的，说以就去查看他的父类<code>Sprite.h</code>这个是怎么初始化的。</p><p>追了 它父类的初始化函数 <code>Sprite.h</code> 看到了它是怎么创建出精灵帧的，下面是他初始化它内部的精灵帧的操作。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> Sprite::setSpriteFrame(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;spriteFrameName)</span><br><span class="line">&#123;</span><br><span class="line">    CCASSERT(!spriteFrameName.empty(), <span class="string">"spriteFrameName must not be empty"</span>);</span><br><span class="line">    <span class="keyword">if</span> (spriteFrameName.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    SpriteFrameCache *cache = SpriteFrameCache::getInstance();</span><br><span class="line">    <span class="comment">// 根据名字在精灵帧缓存中查找相应的精灵帧。</span></span><br><span class="line">    SpriteFrame *spriteFrame = cache-&gt;getSpriteFrameByName(spriteFrameName);</span><br><span class="line"></span><br><span class="line">    CCASSERT(spriteFrame, <span class="built_in">std</span>::<span class="built_in">string</span>(<span class="string">"Invalid spriteFrameName :"</span>).append(spriteFrameName).c_str());</span><br><span class="line">    <span class="comment">// 设置自己内部的精灵帧对象</span></span><br><span class="line">    setSpriteFrame(spriteFrame);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>原理是在精灵帧缓存中查找对象<br>设置精灵的精灵帧</p></blockquote><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a><strong>代码实现</strong></h2><p>这下就好办了。</p><p>lua层的代码就是</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> spriteFrameCache = cc.SpriteFrameCache:getInstance()</span><br><span class="line"><span class="keyword">local</span> frame = spriteFrameCache:getSpriteFrame(<span class="string">"xxx.png"</span>)</span><br><span class="line"><span class="comment">-- xxx.png 就是你 plist文件中对应的文件名字。</span></span><br><span class="line"><span class="comment">-- 这个就是我们需要的精灵帧对象</span></span><br><span class="line"><span class="comment">-- 然后在调用它的 setSpriteFrame</span></span><br></pre></td></tr></table></figure><p>具体的实现代码lua层的<br>c++层我就不说了。暂时没有用到。做法都一样。<br>上面的实现在 cocos2dx display的lua文件里面有实现。所以就直接调用。<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- desc: 创建9宫格图片</span></span><br><span class="line"><span class="comment">-- params [ path | pos | capInsets | size | rect ]</span></span><br><span class="line"><span class="comment">-- params.path 可以是精灵帧 ej: params.path = "#xxx.png"</span></span><br><span class="line"><span class="comment">-- params.pos 精灵的位置</span></span><br><span class="line"><span class="comment">-- params.capInsets 是9宫格中间 Rect 的位置和大小</span></span><br><span class="line"><span class="comment">-- params.rect 可以不用填</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">T.cp_s9</span><span class="params">( parentNode, params )</span></span></span><br><span class="line">    <span class="keyword">local</span> pos = params.pos</span><br><span class="line">    <span class="keyword">local</span> s   = display.newSprite(params.<span class="built_in">path</span>,pos.x,pos.y,params)</span><br><span class="line">    <span class="keyword">local</span> _   = parentNode <span class="keyword">and</span> parentNode:addChild(s)</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- desc: 9宫格图片纹理的更新</span></span><br><span class="line"><span class="comment">-- path 无效添加报错机制</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">T.update_s9</span><span class="params">( node, path, capInsets, size )</span></span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">string</span>.<span class="built_in">byte</span>(<span class="built_in">path</span>) == <span class="number">35</span> <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">local</span> sp = display.newSpriteFrame(<span class="built_in">path</span>)</span><br><span class="line">        node:setSpriteFrame(sp,capInsets)</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> cc.FileUtils:getInstance():isFileExist(<span class="built_in">path</span>) <span class="keyword">then</span></span><br><span class="line">            <span class="built_in">error</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">"invalid path , file isn't exist , path - %s"</span>,<span class="built_in">path</span>))</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        node:setTexture(<span class="built_in">path</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    node:setContentSize(size)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><blockquote><p>需要注意的一点就是在九宫格更新纹理后尺寸又变回原来的大小，你需要重新设置大小。</p></blockquote>]]></content>
      
      <categories>
          
          <category> cocos2dx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cocos2dx </tag>
            
            <tag> 9宫格 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>python-闭包问题</title>
      <link href="//posts/87435431/"/>
      <url>//posts/87435431/</url>
      <content type="html"><![CDATA[<p>本文主要是python闭包问题的记录。<br><a id="more"></a><br>python 实现的有内部函数，那么自然就会使用内部函数外面的变量 。</p><blockquote><p>注意这里是要改变局部变量 可以使用下面的策略，如果只是简单的引用，可以直接引用 不用使用 <code>nonlocal</code> 关键字</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">A</span><span class="params">()</span>:</span></span><br><span class="line">    xxx = <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">B</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="comment">#这个时候你可能会使用xxx变量。  直接引用是会报错的</span></span><br><span class="line">        <span class="comment">#告诉你使用了没有分配的引用   referenced before assignment</span></span><br><span class="line">        <span class="keyword">nonlocal</span> xxx</span><br><span class="line">        xxx += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> xxx</span><br><span class="line">    <span class="keyword">return</span> B</span><br><span class="line">f = A()</span><br><span class="line">print(f(),f(),f())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出  1 2 3</span></span><br></pre></td></tr></table></figure><p>这里主要是使用了python 内部的关键字 <code>nonlocal</code><br>主要是引用内部函数以外的局部变量  注意这里不是全局变量。 </p><blockquote><p>注意这个关键字是python3.x 中可以出现的关键字。在python2.x中会报错。<br>在python2.x的版本中可以使用 list 封装一层，实现使用内部函数以外的局部变量。<br>这里不能使用 元祖 因为元祖的变量时不可变的。</p></blockquote><hr><p>如果要引用全局变量要是用python的另外一个关键字 global。<br>用法和上面相同。   使用例子如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">xxx = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">A</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">B</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="comment">#这个时候你可能会使用xxx变量。  直接引用是会报错的</span></span><br><span class="line">        <span class="comment">#告诉你使用了没有分配的引用   referenced before assignment</span></span><br><span class="line">        <span class="keyword">global</span> xxx</span><br><span class="line">        xxx += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> xxx</span><br><span class="line">    <span class="keyword">return</span> B</span><br><span class="line">f = A()</span><br><span class="line">print(f(),f(),f())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出  1 2 3</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 闭包 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>记录使用hexo写博客的问题</title>
      <link href="//posts/a9ff66a6/"/>
      <url>//posts/a9ff66a6/</url>
      <content type="html"><![CDATA[<p>在使用 hexo 总会遇到这种那种的错误我这里就记录一下,希望后面使用 hexo 写博客的人能少遇到一点麻烦，少走一点弯路，OK，废话不多说。</p><a id="more"></a><h1 id="1-Hexo-TypeError-Cannot-set-property-‘lastIndex’-of-undefined"><a href="#1-Hexo-TypeError-Cannot-set-property-‘lastIndex’-of-undefined" class="headerlink" title="1. Hexo: TypeError: Cannot set property ‘lastIndex’ of undefined"></a>1. Hexo: TypeError: Cannot set property ‘lastIndex’ of undefined</h1><pre><code>解决方案是 将你工程下的 _config.yml (这个不是主题的_config.yml) 文件里面的 `auto_detect` 设置为 false.</code></pre><h1 id="2-hexo-skip-render-的使用"><a href="#2-hexo-skip-render-的使用" class="headerlink" title="2. hexo skip_render 的使用"></a>2. hexo skip_render 的使用</h1><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">skip_render:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">'dir/**'</span> <span class="comment"># 忽略dir这目录下的所有文件，不进行渲染</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">'xx/**'</span>  <span class="comment"># 道理同上。</span></span><br></pre></td></tr></table></figure><h1 id="3-修改完-hexo-目录下的-config-yml-文件-重新-generate-文件不生效"><a href="#3-修改完-hexo-目录下的-config-yml-文件-重新-generate-文件不生效" class="headerlink" title="3. 修改完 hexo 目录下的 _config.yml 文件 重新 generate 文件不生效"></a>3. 修改完 hexo 目录下的 _config.yml 文件 重新 generate 文件不生效</h1><pre><code>使用 hexo 的命令 `hexo clean`,每次记得使用这个命令清除一下</code></pre>]]></content>
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>python_optionparser模块</title>
      <link href="//posts/ce1d3b12/"/>
      <url>//posts/ce1d3b12/</url>
      <content type="html"><![CDATA[<p>本文主要是 python 对命令行的处理模块 就象是这样的<br><img src="/posts/ce1d3b12/1.png" title="show optionParser result}<br><a id="more"></a><br>第一步: 导入模块 </p> <figure class=highlight python><table><tr><td class=gutter><pre><span class=line>1</span><br></pre></td><td class=code><pre><span class=line><span class=keyword>from</span> optparse <span class=keyword>import</span> OptionParser</span><br></pre></td></tr></table></figure> <p>第二步: 构建对象</p> <figure class=highlight python><table><tr><td class=gutter><pre><span class=line>1</span><br><span class=line>2</span><br><span class=line>3</span><br><span class=line>4</span><br><span class=line>5</span><br><span class=line>6</span><br><span class=line>7</span><br><span class=line>8</span><br><span class=line>9</span><br><span class=line>10</span><br><span class=line>11</span><br></pre></td><td class=code><pre><span class=line>parser = OptionParser(usage:<span class=string>usage: %prog -t theme</span>)</span><br><span class=line><span class=comment># 里面是构建程序的相关信息.</span></span><br><span class=line><span class=comment>#当然你也可以这样写:</span></span><br><span class=line>parser = OptionParser(usage=<span class=string>%prog -t theme</span>, version=<span class=string>%prog 1.0</span>)</span><br><span class=line><span class=comment>## 直接输入 --version</span></span><br><span class=line><span class=comment>## 打印 你程序名字 + 版本号</span></span><br><span class=line>&gt; -----------------------------------------</span><br><span class=line>λ python sortFilebySize.py --version</span><br><span class=line> sortFilebySize.py <span class=number>1.0</span></span><br><span class=line>&gt; -----------------------------------------</span><br><span class=line><span class=comment>##这里面 %prog 被直接替换成 你程序的名字 其实就是替换成 os.path.basename.(sys.argv[0]).</span></span><br></pre></td></tr></table></figure> <p>这个模块主要是对这个函数 <code>add_option</code>的使用</p> <p>第三步: 解析 add_option 函数</p> <figure class=highlight python><table><tr><td class=gutter><pre><span class=line>1</span><br><span class=line>2</span><br><span class=line>3</span><br><span class=line>4</span><br><span class=line>5</span><br><span class=line>6</span><br><span class=line>7</span><br><span class=line>8</span><br></pre></td><td class=code><pre><span class=line>parser.add_option(<span class=string>-v</span>,<span class=string>--version</span>,</span><br><span class=line> action=<span class=string>store</span>,</span><br><span class=line> dest=<span class=string>m_version</span>,</span><br><span class=line> type=<span class=string>string</span>,</span><br><span class=line> default=<span class=string>1.0.0</span>,</span><br><span class=line> metavar=<span class=string>version</span>,</span><br><span class=line> help=<span class=string>show cur version</span>)</span><br><span class=line><span class=comment># help 的帮助 信息里面 是可以使用 %default 传递一个默认值</span></span><br></pre></td></tr></table></figure> <blockquote> <p>1-2:前两个是你要提示的参数,长短参数.<br>action:acton 有几个值 <code>store</code> <code>store_true</code> <code>store_false</code> <code>store_const</code> <code>append</code> <code>count</code> <code>callback</code><br>如果没有指定 dest 参数，将用命令行的参数名来对 options 对象的值进行存取。<br>store 也有其它的两种形式： store_true 和 store_false ，用于处理带命令行参数后面不 带值的情况。</p> </blockquote> <figure class=highlight python><table><tr><td class=gutter><pre><span class=line>1</span><br><span class=line>2</span><br><span class=line>3</span><br><span class=line>4</span><br></pre></td><td class=code><pre><span class=line>parser.add_option(<span class=string>-v</span>, action=<span class=string>store_true</span>, dest=<span class=string>m_version</span>)</span><br><span class=line><span class=comment># 这时候你拿到的值默认会置为True</span></span><br><span class=line>parser.add_option(<span class=string>-v</span>, action=<span class=string>store_false</span>, dest=<span class=string>m_version</span>)</span><br><span class=line><span class=comment># 这时候你拿到的值默认会置为False</span></span><br></pre></td></tr></table></figure> <blockquote> <p>dest:设置对象存储这个值的变量名</p> </blockquote> <figure class=highlight python><table><tr><td class=gutter><pre><span class=line>1</span><br><span class=line>2</span><br><span class=line>3</span><br><span class=line>4</span><br><span class=line>5</span><br><span class=line>6</span><br><span class=line>7</span><br></pre></td><td class=code><pre><span class=line>parser.add_option(<span class=string>-v</span>, action=<span class=string>store_true</span>, dest=<span class=string>m_version</span>)</span><br><span class=line>(options, args) = parser.parse_args()</span><br><span class=line>print(options.m_version)</span><br><span class=line>&gt; -----------------------------------------</span><br><span class=line>&gt; λ python sortFilebySize.py -v</span><br><span class=line>&gt; <span class=keyword>True</span></span><br><span class=line>&gt; -----------------------------------------</span><br></pre></td></tr></table></figure> <blockquote> <p>type:指定变量的类型<br>你也可以指定 add_option() 方法中 type 参数为其它值，如 int 或者 float 等等.</p> <p>default:设置这个变量的默认值. 也可以使用这个函数设置 set_defaults()</p> </blockquote> <figure class=highlight python><table><tr><td class=gutter><pre><span class=line>1</span><br></pre></td><td class=code><pre><span class=line>parser.set_defaults(m_version=<span class=string>1.0.0</span>)</span><br></pre></td></tr></table></figure> <blockquote> <p>metavar: 设置 add_option 方法中的 metavar 参数，有助于提醒用户，该命令行参数所期待的参数，如 metavar=”version”：</p> </blockquote> <p><code>注意： metavar 参数中的字符串会自动变为大写。</code></p> <figure class=highlight python><table><tr><td class=gutter><pre><span class=line>1</span><br><span class=line>2</span><br><span class=line>3</span><br><span class=line>4</span><br><span class=line>5</span><br><span class=line>6</span><br></pre></td><td class=code><pre><span class=line>&gt; -----------------------------------------</span><br><span class=line>&gt; λ python sortFilebySize.py -h</span><br><span class=line>&gt; Usage: sortFilebySize.py -t theme</span><br><span class=line>&gt; Options:</span><br><span class=line>&gt; <span class=comment># -v VERSION, --version=VERSION show program" alt="s version number and exit</span></span><br><span class=line>&gt; -----------------------------------------</span><br></pre></td></tr></table></figure> <blockquote> <p>help:用于显示的提示信息</p> </blockquote> <p>如果程序有很多的命令行参数，你可能想为他们进行分组，这时可以使用 OptonGroup:进行分组</p> <figure class=highlight python><table><tr><td class=gutter><pre><span class=line>1</span><br><span class=line>2</span><br><span class=line>3</span><br><span class=line>4</span><br><span class=line>5</span><br><span class=line>6</span><br></pre></td><td class=code><pre><span class=line><span class=keyword>from</span> optparse <span class=keyword>import</span> OptionGroup</span><br><span class=line>group = OptionGroup(parser, <span class=string>Custom Group Options</span>, </span><br><span class=line> <span class=string>Custom Group show message</span></span><br><span class=line> <span class=string>use Custom Group</span>)</span><br><span class=line>group.add_option(<span class=string>-t</span>,action=<span class=string>store</span>,help=<span class=string>Group options</span>)</span><br><span class=line>parser.add_option_group(group)</span><br></pre></td></tr></table></figure> <h2 id=处理异常><a href=#处理异常 class=headerlink title=处理异常:></a><strong>处理异常:</strong></h2><blockquote> <p>指因用户输入无效的、不完整的命令行参数而引发的异常.</p> </blockquote> <figure class=highlight python><table><tr><td class=gutter><pre><span class=line>1</span><br><span class=line>2</span><br><span class=line>3</span><br><span class=line>4</span><br></pre></td><td class=code><pre><span class=line>[-]</span><br><span class=line>(options, args) = parser.parse_args() </span><br><span class=line><span class=keyword>if</span> options.a <span class=keyword>and</span> options.b:</span><br><span class=line> parser.error(<span class=string>options -a and -b invalid</span>)</span><br></pre></td></tr></table></figure> <p>完整的程序例子</p> <figure class=highlight python><table><tr><td class=gutter><pre><span class=line>1</span><br><span class=line>2</span><br><span class=line>3</span><br><span class=line>4</span><br><span class=line>5</span><br><span class=line>6</span><br><span class=line>7</span><br><span class=line>8</span><br><span class=line>9</span><br><span class=line>10</span><br><span class=line>11</span><br><span class=line>12</span><br><span class=line>13</span><br><span class=line>14</span><br><span class=line>15</span><br><span class=line>16</span><br></pre></td><td class=code><pre><span class=line><span class=comment>#! python2</span></span><br><span class=line><span class=comment># coding: utf-8</span></span><br><span class=line><span class=keyword>from</span> optparse <span class=keyword>import</span> OptionParser</span><br><span class=line><span class=keyword>from</span> optparse <span class=keyword>import</span> OptionGroup</span><br><span class=line><span class=function><span class=keyword>def</span> <span class=title>main</span><span class=params>()</span>:</span></span><br><span class=line> parser = OptionParser(usage=<span class=string>usage: %prog -t theme</span>,version=<span class=string>%prog 1.0</span>)</span><br><span class=line> parser.add_option(<span class=string>-v</span>, action=<span class=string>store_true</span>, dest=<span class=string>m_version</span>)</span><br><span class=line> group = OptionGroup(parser, <span class=string>Custom Group Options</span>, </span><br><span class=line> <span class=string>Custom Group show message</span></span><br><span class=line> <span class=string>use Custom Group</span>)</span><br><span class=line> group.add_option(<span class=string>-t</span>,action=<span class=string>store</span>,help=<span class=string>Group options</span>)</span><br><span class=line> parser.add_option_group(group)</span><br><span class=line> (options, args) = parser.parse_args()</span><br><span class=line> <span class=keyword>if</span> options.m_version:</span><br><span class=line> parser.error(<span class=string>options m_version invalid</span>)</span><br><span class=line> <span class=comment># ...</span></span><br></pre></td></tr></table></figure>">]]></content>
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> optionParser </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>git命令的记录</title>
      <link href="//posts/82a402af/"/>
      <url>//posts/82a402af/</url>
      <content type="html"><![CDATA[<p>现在对git也使用快一年了现在总结一下常用的一些命令。</p><h3 id="本文的大纲"><a href="#本文的大纲" class="headerlink" title="本文的大纲"></a><strong>本文的大纲</strong></h3><p>对以下命令做一些记录<br>1.git clone<br>2.git pull<br>3.git commit<br><a id="more"></a><br>4.git push<br>5.git branch<br>6.git remote<br>7.git checkout<br>8.git reset<br>9.git stash<br>10.git配置一些外部工具<br>11.git merge<br>12.git log<br>13.git show</p><h2 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a><strong>git clone</strong></h2><pre><code>git clone 是克隆别的仓库</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone &lt;repo&gt; &lt;directory&gt;</span><br><span class="line">参数说明：</span><br><span class="line">    repo:Git 仓库</span><br><span class="line">    directory:本地目录</span><br></pre></td></tr></table></figure><pre><code>ej:比如，要克隆 Ruby 语言的 Git 代码仓库 Grit，可以用下面的命令：git clone git://github.com/schacon/grit.git或者是这样的git clone git://github.com/schacon/grit.git test这个就会克隆到 ../test 和目录</code></pre><h2 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a><strong>git pull</strong></h2><pre><code>拉取别人在远程仓库更新的内容 默认是远程的 origin 分支</code></pre><h2 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a><strong>git add</strong></h2><pre><code>将本地的改变提交到缓存区</code></pre><p><strong>git add -u</strong></p><blockquote><p>是将本地追踪的文件提交到缓存区</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ej:</span><br><span class="line">git add -u *.png</span><br><span class="line">--添加所有追踪的文件提交到缓存区 前提是以.png 为结尾的文件</span><br></pre></td></tr></table></figure><p><strong>git add -A</strong></p><blockquote><p>是将本地未追踪的文件提交到缓存区</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ej:</span><br><span class="line">git add -A .</span><br><span class="line">--添加所有的未追踪的文件提交到缓存区</span><br></pre></td></tr></table></figure><h2 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a><strong>git commit</strong></h2><blockquote><p>将本地的改变提交到缓存区的内容到本地版本库</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ej:</span><br><span class="line">git commit -m &quot;test&quot;</span><br><span class="line">-- -m 是对此次的提交内容的描述(desc)</span><br></pre></td></tr></table></figure><h2 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a><strong>git push</strong></h2><blockquote><p>将本地的改变提交到本地版本库的内容推送到远程版本库</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ej:</span><br><span class="line">git push</span><br><span class="line">-- 默认是主为分支(origin)</span><br></pre></td></tr></table></figure><blockquote><p>git push 将本地分支推送到云端</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin/远程分支的名字 本地分支的名字</span><br></pre></td></tr></table></figure><h2 id="git-branch"><a href="#git-branch" class="headerlink" title="git branch"></a><strong>git branch</strong></h2><blockquote><p>有关分支的一些使用</p></blockquote><p><strong>git branch</strong></p><blockquote><p>查看本地分支</p></blockquote><p><strong>git branch -vv</strong></p><blockquote><p>查看本地分支 与 远程分支的映射关系</p></blockquote><p><strong>git branch -a</strong></p><blockquote><p>查看 本地和远程分支</p></blockquote><p><strong>git branch -r</strong></p><blockquote><p>查看远程分支</p></blockquote><p><strong>git branch xx</strong></p><blockquote><p>创建新的xx分支</p></blockquote><p><strong>git branch -D xx</strong></p><blockquote><p>删除xx分支</p></blockquote><h2 id="git-branch-upstream-git-分支的映射关系"><a href="#git-branch-upstream-git-分支的映射关系" class="headerlink" title="git branch upstream(git 分支的映射关系)"></a><strong>git branch upstream(git 分支的映射关系)</strong></h2><pre><code>建立本地分支与远程分支的映射关系（或者为跟踪关系track）。这样使用`git pull`或者`git push`时就不必每次都要指定从远程的哪个分支拉取合并和推送到远程的哪个分支了。</code></pre><p>ej:<br><img src="/posts/82a402af/git_branch_vv.png" title="git branch -vv"><br>从这上面可以看到本地分支与远程分支的映射关系<br>若没有映射关系 <code>git pull 或是 git push</code> 会失败</p><p><strong>与远程分支建立映射关系</strong></p><p>使用 <code>git branch -u origin/xx</code> 与远程分支 建立 映射关系<br>xx 为 远程分支的名字</p><p><strong>与远程分支取消映射关系</strong><br>使用 <code>git branch --unset-upstream</code></p><blockquote><p>补充：不同名字客之间也是可以建立映射关系的</p></blockquote><p><strong>删除远程的分支</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git push origin --delete xxx</span><br><span class="line">-- xxx 为远程分支的名字</span><br></pre></td></tr></table></figure></p><h2 id="git-fetch"><a href="#git-fetch" class="headerlink" title="git fetch"></a><strong>git fetch</strong></h2><blockquote><p>来一个关系式 <code>git pull = git fecth + git merge</code><br>拉取别人远程仓库的内容到自己本地的一个分支上</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ej:</span><br><span class="line">    git fecth origin test:temp</span><br><span class="line">    -- 拉取远程分支 test 到 本地 temp 分支上</span><br><span class="line">    -- 注意这种拉取 本地分支和远程分支 是没有映射关系的</span><br></pre></td></tr></table></figure><h2 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a><strong>git remote</strong></h2><p><strong>git remote and git remote -v</strong></p><blockquote><p>git remote用来管理本地工作目录对应的远程代码仓库，在一般的工作目录下，执行git remote结果如下：<br><img src="/posts/82a402af/git_remote_v.png" title="git remote -v"></p></blockquote><p><strong>git remote add</strong></p><blockquote><p>我们可以使用git remote add命令来增加一个远程仓库，这个远程仓库可以是ssh地址（如上面这种），可以是本地目录，也可以是git协议或者http协议的地址。 例如，我要把liming的仓库作为我的远程仓库之一，可以执行git remote add 来增加仓库，例如：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add liming /home/liming/repo</span><br><span class="line">$ git remote</span><br><span class="line">liming</span><br><span class="line">origin</span><br><span class="line">$ git remote -v</span><br><span class="line">liming  /home/liming/repo (fetch)</span><br><span class="line">liming  /home/liming/repo (push)</span><br><span class="line">origin  git@remoteRepo (fetch)</span><br><span class="line">origin  git@remoteRepo (push)</span><br></pre></td></tr></table></figure><blockquote><p>相应的，可以使用git remote rm或者git remote rename对远程代码仓库的名称进行修改（本地的，不会影响到对方的目录）</p></blockquote><h2 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git checkout"></a><strong>git checkout</strong></h2><pre><code>作用：1.切换分支2.放弃对某个文件的修改3.创建新的分支</code></pre><p><strong>git checkout xx</strong></p><blockquote><p>切换到xx分支</p></blockquote><p><strong>git checkout -b xx</strong></p><blockquote><p>在没有的时候 创建的新的分支xx 并跳转到 xx 分支上</p></blockquote><p><strong>git checkout xx.ext</strong></p><blockquote><p>放弃修改直接还原和版本库保持一致</p></blockquote><p><strong>拉取远程方法</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b 本地分支名x origin/远程分支名x</span><br><span class="line">Note:使用该方式会在本地新建分支x，并自动切换到该本地分支x。</span><br><span class="line">     采用此种方法建立的本地分支会和远程分支建立映射关系。</span><br></pre></td></tr></table></figure></p><h2 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a><strong>git reset</strong></h2><pre><code>作用：1.文件从暂存区回退到工作区2.版本回退</code></pre><p>作用1：<br>    git reset HEAD filename(xx)<br>作用2:<br>    我就直接转载一篇文章写的挺好的<br>    <a href="http://blog.csdn.net/hbwindy/article/details/51519999">git reset的使用</a></p><p><a href="https://git-scm.com/book/zh/v2">git 中文的教程</a> –貌似要科学上网</p><h2 id="git-stash"><a href="#git-stash" class="headerlink" title="git stash"></a><strong>git stash</strong></h2><p>你当前正在开发的分支上面，还有未提交的代码，你又不想把代码提交了，怎么办呢？<br>作用：<br>    将本地的改变存储起来，切换到另外的分支上。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git stash</span><br><span class="line">-- 将本地的改变存储起来</span><br><span class="line">git stash list</span><br><span class="line">-- 查看本地存储的列表</span><br></pre></td></tr></table></figure><p><strong>如何恢复工作现场呢？</strong></p><pre><code>第一种方案，用`git stash apply`恢复，但是恢复后，stash内容不删除，需要用`git stash drop`来删除第二种方案，用`git stash pop`,恢复的同时把stash内容也删除了。</code></pre><h2 id="git配置一些外部工具"><a href="#git配置一些外部工具" class="headerlink" title="git配置一些外部工具"></a><strong>git配置一些外部工具</strong></h2><h3 id="配置代码对比工具"><a href="#配置代码对比工具" class="headerlink" title="配置代码对比工具"></a>配置代码对比工具</h3><pre><code>我配置了一个叫diffuse的工具我这里给你提供一个下载地址，当然你也可以自己去下载别的</code></pre><p><a href="http://www.skycn.com/soft/appid/11557.html">download diffuse</a></p><ul><li><p>1.git查看有哪些对比工具可以设置命令：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git difftool --tool-help</span><br></pre></td></tr></table></figure></li><li><p>2.然后再设置对比工具，如：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global diff.tool diffuse</span><br><span class="line">git config --global difftool.diffuse.path &quot;E:\Program Files (x86)\Diffuse\diffuse.exe&quot;</span><br></pre></td></tr></table></figure></li><li><p>3.设置好后，使用命令是 <code>git difftool</code> 而不是之前的 <code>git diff</code> 了</p></li></ul><h2 id="git-Problem"><a href="#git-Problem" class="headerlink" title="git Problem"></a><strong>git Problem</strong></h2><p>Problem :<br>    1.为什么在切换分支的时,会出现有时要你提交本地的改变才可以切换，有的时候却不需要？</p><p><code>出现融合的时候是你当前分支改变的内容与你将要切换分支的内容有冲突，这个时候不知要你融合。</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">解决的方法有我种：</span><br><span class="line">    1.使用 git stash 保存当前的改变   git stash 的用法在上面</span><br><span class="line">    2.使用 git merge  融合要切换的分支到当前的分支</span><br><span class="line">    3.使用 git checkout 还原当前冲突的文件</span><br></pre></td></tr></table></figure><h2 id="git-merge"><a href="#git-merge" class="headerlink" title="git merge"></a><strong>git merge</strong></h2><p>– 2018年3月20日14:36:34<br>git 融合：是融合你当前版本库没有的东西。<br>你可以选择本地的分支也可以是远程的分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- 融合远程分支</span><br><span class="line">ej:</span><br><span class="line">    git merge origin/分支的名字</span><br><span class="line">-- 融合本地分支</span><br><span class="line">ej:</span><br><span class="line">    git merge 分支的名字</span><br></pre></td></tr></table></figure><h2 id="git-更高级的用法"><a href="#git-更高级的用法" class="headerlink" title="git 更高级的用法"></a><strong>git 更高级的用法</strong></h2><p>问题: 在你的使用 git merge 的时候也会出现冲突.</p><h2 id="git-merge-–abort"><a href="#git-merge-–abort" class="headerlink" title="git merge –abort"></a><strong>git merge –abort</strong></h2><p>选项会尝试恢复到你运行合并前的状态。 但当运行命令前，在工作目录中有未储藏、未提交的修改时它不能完美处理，除此之外它都工作地很好</p><h2 id="git-status-sb"><a href="#git-status-sb" class="headerlink" title="git status -sb"></a><strong>git status -sb</strong></h2><p>罗列出需要解决冲突的文件.</p><p>在你合并的时候 你可以将远端共同祖先的文件, 自己本地的文件, 要融合分支的文件,都下载到本地,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git show :1:hello.rb &gt; hello.common.rb</span><br><span class="line">git show :2:hello.rb &gt; hello.ours.rb</span><br><span class="line">git show :3:hello.rb &gt; hello.theirs.rb</span><br></pre></td></tr></table></figure><h2 id="git-clean-f"><a href="#git-clean-f" class="headerlink" title="git clean -f"></a><strong>git clean -f</strong></h2><p>在这时我们可以使用 git clean 命令来清理我们为手动合并而创建但不再有用的额外文件。<br>就是通过上面的命令 git  show :1 …  这个命令产出的文件.</p><!-- 这里面会记录我使用不知过程中的问题[git 问题总结](http://leng521.top/2018/03/07/git%E5%91%BD%E4%BB%A4%E7%9A%84%E8%AE%B0%E5%BD%95/) --><h2 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a><strong>git log</strong></h2><p>这里在更新一下 git log 的一些命令的使用</p><h3 id="git-log-n"><a href="#git-log-n" class="headerlink" title="git log -n"></a><strong>git log -n</strong></h3><p>罗列出最近 n 次提交</p><blockquote><p>ej: git log -3 // 罗列出最近三次的提交信息</p></blockquote><h2 id="git-show"><a href="#git-show" class="headerlink" title="git show"></a><strong>git show</strong></h2><p>显示一些提交的状态信息</p><h3 id="git-show-–stat-commitId"><a href="#git-show-–stat-commitId" class="headerlink" title="git show –stat [commitId]"></a><strong>git show –stat [commitId]</strong></h3><blockquote><p>ej: git show –stat 96daa2f6bb9b413ae3ce5a1ccf3f58ee22b32b42<br>它会罗列出当前这次提交的信息,以文件更改列表的形式显示,如下图<br></p></blockquote><h3 id="git-show-commitId"><a href="#git-show-commitId" class="headerlink" title="git show [commitId]"></a><strong>git show [commitId]</strong></h3><p>这个命令和上个命令很相似 , 只是去掉一个 –stat </p><blockquote><p>ej git show 96daa2f6bb9b413ae3ce5a1ccf3f58ee22b32b42 src/a.lua<br>显示这次这个文件提交的内容</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> git命令 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>优化cocos2dxSpine库</title>
      <link href="//posts/c4c0a180/"/>
      <url>//posts/c4c0a180/</url>
      <content type="html"><![CDATA[<h1 id="对cocos2dxSpine库的升级和优化"><a href="#对cocos2dxSpine库的升级和优化" class="headerlink" title="对cocos2dxSpine库的升级和优化"></a><strong>对cocos2dxSpine库的升级和优化</strong></h1><h3 id="本文的大纲"><a href="#本文的大纲" class="headerlink" title="本文的大纲"></a><strong>本文的大纲</strong></h3><p>1.升级spine在cocos2dx-3.15的运行时库<br>2.优化spine在创建的时候效率</p><p>在开发的时候出现的问题<br>1.spine这个软件导出3.6新加的特效在cocos2dx3.15 不能使用<br>2.spine在批量创建的时候帧数会下降<br><a id="more"></a></p><h3 id="升级spine-gt-3-6"><a href="#升级spine-gt-3-6" class="headerlink" title="升级spine -&gt;3.6"></a><strong>升级spine -&gt;3.6</strong></h3><p><a href="https://github.com/EsotericSoftware/spine-runtimes">spine code github 地址</a><br>去这个地址clone或者是下载Zip这个你随便<br>然后会产现这个目录<br><!-- ![]() --><br><img src="/posts/c4c0a180/spine-code_1.png" title="spine的目录"><br>主要就是我使用箭头标记的这两个目录</p><pre><code>spine-c/spine-c/include/spine/*.hspine-c/spine-c/src/spine/*.cspine-cocos2dx/src/spine/*.cpp  and  spine-cocos2dx/src/spine/*.h</code></pre><p>找到自己的工程的根目录 然后去找这个目录<br>全部放在 <code>···/frameworks/cocos2d-x/cocos/editor-support/spine</code></p><p>直接全部替换<br>然后打开自己的VS去编译记住一点将你添加的C或C++的文件给添加到libSpine的工程中的源文件中</p><img src="/posts/c4c0a180/libSpine_1.png" title="添加到libSpine的工程中去"><p>选中 Source Files 执行 <code>Shift + Alt + A</code> 添加现有项  或者是鼠标右键添加好可以</p><p>然后编译,你会惊奇的发现编译成功了,但是不要高兴的太早了,因为这个在编译Android的时候会报错,当然原因也很简单，接着往下面看。</p><p><strong>在Android中的实现</strong><br>你找到 这个目录里面会有 <code>···/frameworks/cocos2d-x/cocos/editor-support/spine</code><br><code>Android.mk</code>的文件<br>将你添加的写在这个配置里面 注意只写 *.h 的文件<br>然后使用 Android Studio 编译 Apk, 这里你也可以使用NDK编译,但是在Android2.？这个不记得了,就已经不在支持NDK编译了<br>所以还是使用Android Studio 吧</p><p>在 ios 中的实现也是同样如此，这里就不再讲述了</p><h3 id="优化spine在创建的时候效率"><a href="#优化spine在创建的时候效率" class="headerlink" title="优化spine在创建的时候效率"></a><strong>优化spine在创建的时候效率</strong></h3><p>在原先的 spine 创建的时候每次都需要解析数据,生成骷髅数据,其实这个是很消耗CPU的,导致FPS下降。<br>我的做法是保留 spine create 的原有接口,自己再从新写一个新的接口。<br>原理：创建字典<map>保留骷髅数据每次创建的时候询问这个 Map 是否存在 key 没有创建,有直接使用。</p><p>代码的写法有很多种,我这只是参考</p><p>在SkeletonAnimation.cpp 中添加如下代码<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">SkeletonAnimation* SkeletonAnimation::createFromCache(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; key_skeletonData)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (spSkeletonData* skeleton_data = SkeletonAnimation::getSkeletonDataFromCache(key_skeletonData))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> SkeletonAnimation::createWithData(skeleton_data, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        skeleton_data = SkeletonAnimation::loadSkeletonDataToCache(key_skeletonData, key_skeletonData + <span class="string">".json"</span>, key_skeletonData + <span class="string">".atlas"</span>);</span><br><span class="line">        <span class="keyword">if</span> (skeleton_data) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> SkeletonAnimation::createWithData(skeleton_data, <span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line">spSkeletonData* SkeletonAnimation::loadSkeletonDataToCache(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; key_skeletonData, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; skeletonJsonFile, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; atlasFile, <span class="keyword">float</span> scale)</span><br><span class="line">&#123;</span><br><span class="line">    iteratorSkeletonData it = _allSkeletonDataCache.find(key_skeletonData);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (it == _allSkeletonDataCache.end())</span><br><span class="line">    &#123;</span><br><span class="line">        SkeletonDataInCache skeleton_data_in_cache;</span><br><span class="line">        spAtlas* atlas = <span class="literal">nullptr</span>;</span><br><span class="line">        spAttachmentLoader* attachmentLoader = <span class="literal">nullptr</span>;</span><br><span class="line">        skeleton_data_in_cache._skeleton_data = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">        atlas = spAtlas_createFromFile(atlasFile.c_str(), <span class="number">0</span>);</span><br><span class="line">        CCASSERT(atlas, <span class="string">"loadSkeletonDataToCache Error  atlas file."</span>);</span><br><span class="line"></span><br><span class="line">        attachmentLoader = SUPER(Cocos2dAttachmentLoader_create(atlas));</span><br><span class="line"></span><br><span class="line">        spSkeletonJson* json = spSkeletonJson_createWithLoader(attachmentLoader);</span><br><span class="line">        json-&gt;scale = scale;</span><br><span class="line">        skeleton_data_in_cache._skeleton_data = spSkeletonJson_readSkeletonDataFile(json, skeletonJsonFile.c_str());</span><br><span class="line">        CCASSERT(skeleton_data_in_cache._skeleton_data, json-&gt;error ? json-&gt;error : <span class="string">"loadSkeletonDataToCache Error reading skeleton data file."</span>);</span><br><span class="line">        spSkeletonJson_dispose(json);</span><br><span class="line">        spAtlas_dispose(atlas);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (skeleton_data_in_cache._skeleton_data)</span><br><span class="line">        &#123;</span><br><span class="line">            _allSkeletonDataCache[key_skeletonData] = skeleton_data_in_cache;</span><br><span class="line">            <span class="keyword">return</span> skeleton_data_in_cache._skeleton_data;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//error release</span></span><br><span class="line">            <span class="keyword">if</span> (skeleton_data_in_cache._skeleton_data)</span><br><span class="line">            &#123;</span><br><span class="line">                spSkeletonData_dispose(skeleton_data_in_cache._skeleton_data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line">spSkeletonData* SkeletonAnimation::getSkeletonDataFromCache(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; key_skeletonData)</span><br><span class="line">&#123;</span><br><span class="line">    iteratorSkeletonData it = _allSkeletonDataCache.find(key_skeletonData);</span><br><span class="line">    <span class="keyword">if</span> (it != _allSkeletonDataCache.end())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> it-&gt;second._skeleton_data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> SkeletonAnimation::removeSkeletonData(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; key_skeletonData)</span><br><span class="line">&#123;</span><br><span class="line">    iteratorSkeletonData it = _allSkeletonDataCache.find(key_skeletonData);</span><br><span class="line">    <span class="keyword">if</span> (it != _allSkeletonDataCache.end()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (it-&gt;second._skeleton_data) spSkeletonData_dispose(it-&gt;second._skeleton_data);</span><br><span class="line"></span><br><span class="line">        _allSkeletonDataCache.erase(it);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> SkeletonAnimation::removeAllSkeletonData()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (iteratorSkeletonData it = _allSkeletonDataCache.begin(); it != _allSkeletonDataCache.end(); ++it) &#123;</span><br><span class="line">        <span class="keyword">if</span> (it-&gt;second._skeleton_data) spSkeletonData_dispose(it-&gt;second._skeleton_data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    _allSkeletonDataCache.clear();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> SkeletonAnimation::isExistSkeletonDataInCache(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; key_skeletonData)</span><br><span class="line">&#123;</span><br><span class="line">    iteratorSkeletonData it = _allSkeletonDataCache.find(key_skeletonData);</span><br><span class="line">    <span class="keyword">if</span> (it != _allSkeletonDataCache.end()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//end</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>, SkeletonAnimation::SkeletonDataInCache&gt; SkeletonAnimation::_allSkeletonDataCache;</span><br></pre></td></tr></table></figure></p><p>在 SkeletonAnimation.h 中添加如下代码<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> SkeletonAnimation* <span class="title">createFromCache</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; key_skeletonData)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> spSkeletonData* <span class="title">loadSkeletonDataToCache</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; key_skeletonData, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; skeletonJsonFile, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; atlasFile, <span class="keyword">float</span> scale = <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> spSkeletonData* <span class="title">getSkeletonDataFromCache</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; key_skeletonData)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">removeSkeletonData</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; key_skeletonData)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">removeAllSkeletonData</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">isExistSkeletonDataInCache</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; skeletonDataKeyName)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">SkeletonDataInCache</span> &#123;</span></span><br><span class="line">        spSkeletonData* _skeleton_data; </span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>, SkeletonDataInCache&gt;::iterator iteratorSkeletonData;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>, SkeletonDataInCache&gt; _allSkeletonDataCache;</span><br><span class="line">    <span class="comment">//end</span></span><br></pre></td></tr></table></figure></p><h3 id="Binding-to-lua"><a href="#Binding-to-lua" class="headerlink" title="Binding to lua"></a><strong>Binding to lua</strong></h3><p>既然写了这么多了,就要将这些代码绑定到lua中去</p><p>找到自己工程的的libluacocos2d的工程<br><img src="/posts/c4c0a180/auto_binding_2_lua_1.png" title="绑定C++到lua"><br>这里你可以自己写代码在 <code>lua_cocos2dx_spine_auto.cpp</code> 中,但是这不是一个程序员应该做的。<br>第二种做是:既然它的文件名有 <code>auto</code> 这个单词,一看就不是人写出来的,OK,去寻找答案。</p><p>到这个目录中去 <code>···/frameworks/cocos2d-x/tools/tolua/</code> 你会发现有一个<code>genbindings.py</code>的文件<br>你一运行可能报错,你去读他的 <code>README.md</code> ,发现他要你装一些python的库,那就按照说的安装吧<br>你可以 pip 命令也可以 自己下载zip 这个随意。<br>然后就是配置NDK,这个下载解压,配置 path 就完了,我就不多说了。</p><p>然后你运行可能还会报错</p><p>那就打开 <code>genbindings.py</code> 你会发现他需要的是NDK <strong>3.3-3.4</strong> 然而自己的NDK经过查看 是 <strong>3.5-3.6</strong> 没关系,把它这个所有相关 <strong>3.3  3.4</strong> 全部改成 <strong>3.5-3.6</strong>的就OK了。</p><p>改完后运行 Prefect ^-^.</p><h3 id="在lua中调用"><a href="#在lua中调用" class="headerlink" title="在lua中调用"></a><strong>在lua中调用</strong></h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sp.SkeletonAnimation: createFromCache(key)</span><br><span class="line">sp.SkeletonAnimation: isExistSkeletonDataInCache(key)</span><br><span class="line">sp.SkeletonAnimation: loadSkeletonDataToCache(key,jsonFilePath,atlasFilePath,scale =<span class="number">1</span>)      </span><br><span class="line">sp.SkeletonAnimation: getSkeletonDataFromCache(key)</span><br><span class="line">sp.SkeletonAnimation: removeSkeletonData(key)</span><br><span class="line">sp.SkeletonAnimation: removeAllSkeletonData()</span><br></pre></td></tr></table></figure><p>这里面有一个问题是你会发现返回的<code>骨胳数据</code>拿不到,这个是cocos2dx在绑定的时候并没有将这个数据类型绑定lua去,我上面那么写就是为了以后留个接口,当然你也可以自己把那个返回值去掉。</p><p>好了今天就到这吧。</p>]]></content>
      
      <categories>
          
          <category> cocos2dx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spine </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Using-Hexo</title>
      <link href="//posts/6743743b/"/>
      <url>//posts/6743743b/</url>
      <content type="html"><![CDATA[<p>这篇文章只是我对 hexo 的一些功能的测试吧，可能后会常用到这些东西</p><h2 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h2><h2 id="install-Hexo"><a href="#install-Hexo" class="headerlink" title="install Hexo"></a>install Hexo</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% blockquote [author[, source]] [link] [source_link_title] %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><blockquote><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.</p></blockquote><blockquote><p>Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</p><footer><strong>David Levithan</strong><cite>-Wide Awake</cite></footer></blockquote><blockquote><p>NEW: DevDocs now comes with syntax highlighting. <a href="http://devdocs.io">http://devdocs.io</a></p><footer><strong>@DevDocs</strong><cite><a href="https://twitter.com/devdocs/status/356095192085962752">twitter.com/devdocs/status/356095192085962752</a></cite></footer></blockquote><blockquote><p>Every interaction is both precious and an opportunity to delight.</p><footer><strong>Seth Godin</strong><cite><a href="http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html">Welcome to Island Marketing</a></cite></footer></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock [title] [lang:language] [url] [link text] %&#125;</span><br><span class="line">code snippet</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alert(&apos;Hello World!&apos;);</span><br><span class="line">print(&apos;Hello World!&apos;)</span><br></pre></td></tr></table></figure><p>language -&gt; OC<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[rectangle setX: <span class="number">10</span> y: <span class="number">10</span> width: <span class="number">20</span> height: <span class="number">20</span>];</span><br></pre></td></tr></table></figure></p><p>language -&gt; python<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print('Hello World!')</span><br></pre></td></tr></table></figure></p><h3 id="附加说明"><a href="#附加说明" class="headerlink" title="附加说明"></a><strong>附加说明</strong></h3><figure class="highlight plain"><figcaption><span>Array.map</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.map(callback[, thisArg])</span><br></pre></td></tr></table></figure><h3 id="附加说明和网址"><a href="#附加说明和网址" class="headerlink" title="附加说明和网址"></a><strong>附加说明和网址</strong></h3><figure class="highlight plain"><figcaption><span>_.compact</span><a href="http://underscorejs.org/#compact">Underscore.js</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">_.compact([0, 1, false, 2, &apos;&apos;, 3]);</span><br><span class="line">=&gt; [1, 2, 3]</span><br></pre></td></tr></table></figure><h3 id="反引号代码块"><a href="#反引号代码块" class="headerlink" title="反引号代码块"></a><strong>反引号代码块</strong></h3><p><code>[language] [title] [url] [link text] code snippet</code></p><p>language - &gt;OC<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[rectangle setX: <span class="number">10</span> y: <span class="number">10</span> width: <span class="number">20</span> height: <span class="number">20</span>];</span><br></pre></td></tr></table></figure></p><h3 id="插入Image图片"><a href="#插入Image图片" class="headerlink" title="插入Image图片"></a><strong>插入Image图片</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% img [class names] /path/to/image [width] [height] [title text [alt text]] %&#125;</span><br><span class="line">&#123;% asset_img fileName.* title&#125;</span><br></pre></td></tr></table></figure><img src="/posts/6743743b/1.jpg" title="wolf">/posts/6743743b/test.lua<a href="/posts/6743743b/test.lua" title="test.lua">test.lua</a><h3 id="引用文章"><a href="#引用文章" class="headerlink" title="引用文章"></a><strong>引用文章</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% post_path slug %&#125;</span><br><span class="line">&#123;% post_link slug [title] %&#125;</span><br></pre></td></tr></table></figure><h3 id="使用iframe"><a href="#使用iframe" class="headerlink" title="使用iframe"></a><strong>使用iframe</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% iframe url [width] [height] %&#125;</span><br></pre></td></tr></table></figure><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=515143440&auto=0&height=66"></iframe><!-- <iframe src="//music.163.com/outchain/player?type=2&id=515143440&auto=0&height=66" width="330" height="90" frameborder="0" allowfullscreen></iframe> –&gt;<!-- <img src="/path/to/image" class="[class names]" title="[width] [height] [title text [alt text]]"><p><img class="} –&gt;</p>">]]></content>
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> IT </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="//posts/4a17b156/"/>
      <url>//posts/4a17b156/</url>
      <content type="html"><![CDATA[<h2 id="搭建自己的博客在github-page"><a href="#搭建自己的博客在github-page" class="headerlink" title="搭建自己的博客在github page"></a>搭建自己的博客在github page</h2><p>经过2天的折腾的终于把自己的博客给搭建出来了,也可以说是自己的一个<code>Hello World</code> 吧<br><a id="more"></a><br>这个主题是使用<strong>Litten</strong>的theme通过hexo搭建</p><h2 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a><strong>准备环境</strong></h2><pre><code>* install git   * install node* 注册github的账号</code></pre><p><a href="https://git-scm.com/downloads">Git Download</a><br><a href="http://nodejs.cn/download/">nodejs Download</a><br><a href="https://github.com/">github 注册的地址</a></p><h2 id="再创建之前思考一个事情"><a href="#再创建之前思考一个事情" class="headerlink" title="再创建之前思考一个事情"></a><strong>再创建之前思考一个事情</strong></h2><p>就是在你做完这些之后，你开始写自己的博客的时候，突然之间要换电脑了，这个时候你要怎么办<br>这个思考是对于那些使用过 github 或者是使用过别的版本控制的工具。 </p><h2 id="Build-to-blog"><a href="#Build-to-blog" class="headerlink" title="Build to blog"></a><strong>Build to blog</strong></h2><pre><code>安装 nodejs 很简单,就是傻瓜式的安装。在安装 git 的时候也是一键式安装。然后自己注册github的账号。</code></pre><p>记得配置自己的 <code>nodejs的Path</code></p><p>在 cmd 窗口 输入 path<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/assets/hello-world/path_1.png" alt="path" title="">                </div>                <div class="image-caption">path</div>            </figure><br>我自己的 <code>nodejs</code> 在E盘</p><p>同样看看自己的 git 的 path 有没有配置</p><p>然后就是验证你的安装是否正确打开你 cmd 输入 git<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/assets/hello-world/git_1.png" alt="git" title="">                </div>                <div class="image-caption">git</div>            </figure><br>输入 node -v<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/assets/hello-world/node_1.png" alt="node -v" title="">                </div>                <div class="image-caption">node -v</div>            </figure><br>github 就不用验证了吧</p><p>然后就是利用 node 的 npm 工具去安装 hexo 输入 </p><pre><code>npm install -g hexo-cli</code></pre><p>如果自己的 hexo 安装成功的话</p><p>在 cmd 中 输入 hexo -v<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/assets/hello-world/hexo_1.png" alt="hexo -v" title="">                </div>                <div class="image-caption">hexo -v</div>            </figure></p><h2 id="创建自己的-hexo-工程"><a href="#创建自己的-hexo-工程" class="headerlink" title="创建自己的 hexo 工程"></a><strong>创建自己的 hexo 工程</strong></h2><p>假设自己的 hexo 的工程目录是在 D:\Pro\pro_wdh\nodejs</p><pre><code>1. 在 cmd 中 输入 pushd D:\Pro\pro_wdh\nodejs2. cmd的当前目录直接跳转到 D:\Pro\pro_wdh\nodejs3. 使用 hexo init 命令 初始化  （）hexo init [folderName] ）</code></pre><blockquote><p>hexo init hexo<br>cd hexo<br>nmp install</p></blockquote><p>完成之后目录结构如下：</p><pre><code>.├── _config.yml├── package.json├── scaffolds├── source|   ├── _drafts|   └── _posts└── themes</code></pre><h3 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a><strong>_config.yml</strong></h3><p>网站的 配置 信息，您可以在此配置大部分的参数。</p><h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a><strong>package.json</strong></h3><p>应用程序的信息。EJS, Stylus 和 Markdown renderer 已默认安装，您可以自由移除。</p><h3 id="scaffolds"><a href="#scaffolds" class="headerlink" title="scaffolds"></a><strong>scaffolds</strong></h3><p>模版 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。</p><p>Hexo的模板是指在新建的markdown文件中默认填充的内容。例如，如果您修改scaffold/post.md中的Front-matter内容，那么每次新建一篇文章时都会包含这个修改。</p><h3 id="source"><a href="#source" class="headerlink" title="source"></a><strong>source</strong></h3><p>资源文件夹是存放用户资源的地方。除 <em>posts 文件夹之外，开头命名为 </em> (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。</p><h3 id="themes"><a href="#themes" class="headerlink" title="themes"></a><strong>themes</strong></h3><p>主题 文件夹。Hexo 会根据主题来生成静态页面。</p><h2 id="运行自己的hexo工程"><a href="#运行自己的hexo工程" class="headerlink" title="运行自己的hexo工程"></a><strong>运行自己的hexo工程</strong></h2><p>在 cmd 中 输入 hexo s<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/assets/hello-world/hexo_2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>在自己的浏览器中打开 <code>http://localhost:4000/.</code></p><p>这时你会看到自己的静态网页</p><p><a href="https://segmentfault.com/a/1190000002632530">更多的 hexo的命令</a><br><a href="https://hexo.io/zh-cn/">hexo 的官网</a></p><h2 id="部署自己的笔记2github"><a href="#部署自己的笔记2github" class="headerlink" title="部署自己的笔记2github"></a><strong>部署自己的笔记2github</strong></h2><p>网上的一些教程都是 使用 SSH 去上传自己的博客<br>但是使用 htpp 的方式也同样可以 上传</p><p>创建自己的 github 的仓库<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/assets/hello-world/github_1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>上面的仓库名字就和你 github 的名字一样就行了</p><p>然后就是在 hexo 的根目录下的 _config.yml 中 找到<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/assets/hello-world/config_1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>按照图片上的配置自己的 github 仓库的地址<br>github 仓库的地址在这里拿<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/assets/hello-world/github_2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>然后执行 hexo的命令 在cmd中输入  </p><pre><code>1.hexo clean2.hexo g3.hexo d</code></pre><p>静静的等待</p><p>上传完成之后</p><p>打开 <code>http://Test.github.io</code> 就可以看到自己的博客了</p><h2 id="回答上面的提出的思考"><a href="#回答上面的提出的思考" class="headerlink" title="回答上面的提出的思考"></a><strong>回答上面的提出的思考</strong></h2><p>答案就是 在 github 上创建自己的 branch(分支)</p><p>我是在自己的 github 创建自己的 blog(分支)</p><p><a href="http://note.youdao.com/noteshare?id=7abb057f779aca20328c74a7c810e027&amp;sub=855026A2B8904F61A0933D26CA9E27FF">git 的一些命令</a></p><p>不是太全,但是应对日常还是可以的</p><p>做法如下：</p><pre><code>git chcekout -b bloggit add -Agit commit - m &quot;commit my blog&quot;git push origin blog</code></pre><p>解释一下吧</p><blockquote><p>创建新的分支 blog<br>添加自己的文件到缓存区<br>提交到本地版本库<br>推送到远端</p></blockquote><p><a href="http://www.runoob.com/?s=git">更多 git 的知识</a></p><p>这只是一些基础</p><p>更多需要你多去尝试,多自己动手。</p><p>有疑问可以加QQ一起讨论</p>]]></content>
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hello world </tag>
            
            <tag> github page </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
