<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>python-闭包问题</title>
      <link href="//posts/87435431/"/>
      <url>//posts/87435431/</url>
      <content type="html"><![CDATA[<p>本文主要是python闭包问题的记录。<br><a id="more"></a><br>python 实现的有内部函数，那么自然就会使用内部函数外面的变量 。</p><blockquote><p>注意这里是要改变局部变量 可以使用下面的策略，如果只是简单的引用，可以直接引用 不用使用 <code>nonlocal</code> 关键字</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">A</span><span class="params">()</span>:</span></span><br><span class="line">    xxx = <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">B</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="comment">#这个时候你可能会使用xxx变量。  直接引用是会报错的</span></span><br><span class="line">        <span class="comment">#告诉你使用了没有分配的引用   referenced before assignment</span></span><br><span class="line">        <span class="keyword">nonlocal</span> xxx</span><br><span class="line">        xxx += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> xxx</span><br><span class="line">    <span class="keyword">return</span> B</span><br><span class="line">f = A()</span><br><span class="line">print(f(),f(),f())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出  1 2 3</span></span><br></pre></td></tr></table></figure><p>这里主要是使用了python 内部的关键字 <code>nonlocal</code><br>主要是引用内部函数以外的局部变量  注意这里不是全局变量。 </p><blockquote><p>注意这个关键字是python3.x 中可以出现的关键字。在python2.x中会报错。<br>在python2.x的版本中可以使用 list 封装一层，实现使用内部函数以外的局部变量。<br>这里不能使用 元祖 因为元祖的变量时不可变的。</p></blockquote><hr><p>如果要引用全局变量要是用python的另外一个关键字 global。<br>用法和上面相同。   使用例子如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">xxx = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">A</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">B</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="comment">#这个时候你可能会使用xxx变量。  直接引用是会报错的</span></span><br><span class="line">        <span class="comment">#告诉你使用了没有分配的引用   referenced before assignment</span></span><br><span class="line">        <span class="keyword">global</span> xxx</span><br><span class="line">        xxx += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> xxx</span><br><span class="line">    <span class="keyword">return</span> B</span><br><span class="line">f = A()</span><br><span class="line">print(f(),f(),f())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出  1 2 3</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 闭包 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>记录使用hexo写博客的问题</title>
      <link href="//posts/a9ff66a6/"/>
      <url>//posts/a9ff66a6/</url>
      <content type="html"><![CDATA[<p>在使用 hexo 总会遇到这种那种的错误我这里就记录一下,希望后面使用 hexo 写博客的人能少遇到一点麻烦，少走一点弯路，OK，废话不多说。</p><a id="more"></a><h1 id="1-Hexo-TypeError-Cannot-set-property-‘lastIndex’-of-undefined"><a href="#1-Hexo-TypeError-Cannot-set-property-‘lastIndex’-of-undefined" class="headerlink" title="1. Hexo: TypeError: Cannot set property ‘lastIndex’ of undefined"></a>1. Hexo: TypeError: Cannot set property ‘lastIndex’ of undefined</h1><pre><code>解决方案是 将你工程下的 _config.yml (这个不是主题的_config.yml) 文件里面的 `auto_detect` 设置为 false.</code></pre><h1 id="2-hexo-skip-render-的使用"><a href="#2-hexo-skip-render-的使用" class="headerlink" title="2. hexo skip_render 的使用"></a>2. hexo skip_render 的使用</h1><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">skip_render:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">'dir/**'</span> <span class="comment"># 忽略dir这目录下的所有文件，不进行渲染</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">'xx/**'</span>  <span class="comment"># 道理同上。</span></span><br></pre></td></tr></table></figure><h1 id="3-修改完-hexo-目录下的-config-yml-文件-重新-generate-文件不生效"><a href="#3-修改完-hexo-目录下的-config-yml-文件-重新-generate-文件不生效" class="headerlink" title="3. 修改完 hexo 目录下的 _config.yml 文件 重新 generate 文件不生效"></a>3. 修改完 hexo 目录下的 _config.yml 文件 重新 generate 文件不生效</h1><pre><code>使用 hexo 的命令 `hexo clean`,每次记得使用这个命令清除一下</code></pre>]]></content>
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>python_optionparser模块</title>
      <link href="//posts/ce1d3b12/"/>
      <url>//posts/ce1d3b12/</url>
      <content type="html"><![CDATA[<p>本文主要是 python 对命令行的处理模块 就象是这样的<br><img src="/posts/ce1d3b12/1.png" title="show optionParser result}<br><a id="more"></a><br>第一步: 导入模块 </p> <figure class=highlight python><table><tr><td class=gutter><pre><span class=line>1</span><br></pre></td><td class=code><pre><span class=line><span class=keyword>from</span> optparse <span class=keyword>import</span> OptionParser</span><br></pre></td></tr></table></figure> <p>第二步: 构建对象</p> <figure class=highlight python><table><tr><td class=gutter><pre><span class=line>1</span><br><span class=line>2</span><br><span class=line>3</span><br><span class=line>4</span><br><span class=line>5</span><br><span class=line>6</span><br><span class=line>7</span><br><span class=line>8</span><br><span class=line>9</span><br><span class=line>10</span><br><span class=line>11</span><br></pre></td><td class=code><pre><span class=line>parser = OptionParser(usage:<span class=string>usage: %prog -t theme</span>)</span><br><span class=line><span class=comment># 里面是构建程序的相关信息.</span></span><br><span class=line><span class=comment>#当然你也可以这样写:</span></span><br><span class=line>parser = OptionParser(usage=<span class=string>%prog -t theme</span>, version=<span class=string>%prog 1.0</span>)</span><br><span class=line><span class=comment>## 直接输入 --version</span></span><br><span class=line><span class=comment>## 打印 你程序名字 + 版本号</span></span><br><span class=line>&gt; -----------------------------------------</span><br><span class=line>λ python sortFilebySize.py --version</span><br><span class=line> sortFilebySize.py <span class=number>1.0</span></span><br><span class=line>&gt; -----------------------------------------</span><br><span class=line><span class=comment>##这里面 %prog 被直接替换成 你程序的名字 其实就是替换成 os.path.basename.(sys.argv[0]).</span></span><br></pre></td></tr></table></figure> <p>这个模块主要是对这个函数 <code>add_option</code>的使用</p> <p>第三步: 解析 add_option 函数</p> <figure class=highlight python><table><tr><td class=gutter><pre><span class=line>1</span><br><span class=line>2</span><br><span class=line>3</span><br><span class=line>4</span><br><span class=line>5</span><br><span class=line>6</span><br><span class=line>7</span><br><span class=line>8</span><br></pre></td><td class=code><pre><span class=line>parser.add_option(<span class=string>-v</span>,<span class=string>--version</span>,</span><br><span class=line> action=<span class=string>store</span>,</span><br><span class=line> dest=<span class=string>m_version</span>,</span><br><span class=line> type=<span class=string>string</span>,</span><br><span class=line> default=<span class=string>1.0.0</span>,</span><br><span class=line> metavar=<span class=string>version</span>,</span><br><span class=line> help=<span class=string>show cur version</span>)</span><br><span class=line><span class=comment># help 的帮助 信息里面 是可以使用 %default 传递一个默认值</span></span><br></pre></td></tr></table></figure> <blockquote> <p>1-2:前两个是你要提示的参数,长短参数.<br>action:acton 有几个值 <code>store</code> <code>store_true</code> <code>store_false</code> <code>store_const</code> <code>append</code> <code>count</code> <code>callback</code><br>如果没有指定 dest 参数，将用命令行的参数名来对 options 对象的值进行存取。<br>store 也有其它的两种形式： store_true 和 store_false ，用于处理带命令行参数后面不 带值的情况。</p> </blockquote> <figure class=highlight python><table><tr><td class=gutter><pre><span class=line>1</span><br><span class=line>2</span><br><span class=line>3</span><br><span class=line>4</span><br></pre></td><td class=code><pre><span class=line>parser.add_option(<span class=string>-v</span>, action=<span class=string>store_true</span>, dest=<span class=string>m_version</span>)</span><br><span class=line><span class=comment># 这时候你拿到的值默认会置为True</span></span><br><span class=line>parser.add_option(<span class=string>-v</span>, action=<span class=string>store_false</span>, dest=<span class=string>m_version</span>)</span><br><span class=line><span class=comment># 这时候你拿到的值默认会置为False</span></span><br></pre></td></tr></table></figure> <blockquote> <p>dest:设置对象存储这个值的变量名</p> </blockquote> <figure class=highlight python><table><tr><td class=gutter><pre><span class=line>1</span><br><span class=line>2</span><br><span class=line>3</span><br><span class=line>4</span><br><span class=line>5</span><br><span class=line>6</span><br><span class=line>7</span><br></pre></td><td class=code><pre><span class=line>parser.add_option(<span class=string>-v</span>, action=<span class=string>store_true</span>, dest=<span class=string>m_version</span>)</span><br><span class=line>(options, args) = parser.parse_args()</span><br><span class=line>print(options.m_version)</span><br><span class=line>&gt; -----------------------------------------</span><br><span class=line>&gt; λ python sortFilebySize.py -v</span><br><span class=line>&gt; <span class=keyword>True</span></span><br><span class=line>&gt; -----------------------------------------</span><br></pre></td></tr></table></figure> <blockquote> <p>type:指定变量的类型<br>你也可以指定 add_option() 方法中 type 参数为其它值，如 int 或者 float 等等.</p> <p>default:设置这个变量的默认值. 也可以使用这个函数设置 set_defaults()</p> </blockquote> <figure class=highlight python><table><tr><td class=gutter><pre><span class=line>1</span><br></pre></td><td class=code><pre><span class=line>parser.set_defaults(m_version=<span class=string>1.0.0</span>)</span><br></pre></td></tr></table></figure> <blockquote> <p>metavar: 设置 add_option 方法中的 metavar 参数，有助于提醒用户，该命令行参数所期待的参数，如 metavar=”version”：</p> </blockquote> <p><code>注意： metavar 参数中的字符串会自动变为大写。</code></p> <figure class=highlight python><table><tr><td class=gutter><pre><span class=line>1</span><br><span class=line>2</span><br><span class=line>3</span><br><span class=line>4</span><br><span class=line>5</span><br><span class=line>6</span><br></pre></td><td class=code><pre><span class=line>&gt; -----------------------------------------</span><br><span class=line>&gt; λ python sortFilebySize.py -h</span><br><span class=line>&gt; Usage: sortFilebySize.py -t theme</span><br><span class=line>&gt; Options:</span><br><span class=line>&gt; <span class=comment># -v VERSION, --version=VERSION show program" alt="s version number and exit</span></span><br><span class=line>&gt; -----------------------------------------</span><br></pre></td></tr></table></figure> <blockquote> <p>help:用于显示的提示信息</p> </blockquote> <p>如果程序有很多的命令行参数，你可能想为他们进行分组，这时可以使用 OptonGroup:进行分组</p> <figure class=highlight python><table><tr><td class=gutter><pre><span class=line>1</span><br><span class=line>2</span><br><span class=line>3</span><br><span class=line>4</span><br><span class=line>5</span><br><span class=line>6</span><br></pre></td><td class=code><pre><span class=line><span class=keyword>from</span> optparse <span class=keyword>import</span> OptionGroup</span><br><span class=line>group = OptionGroup(parser, <span class=string>Custom Group Options</span>, </span><br><span class=line> <span class=string>Custom Group show message</span></span><br><span class=line> <span class=string>use Custom Group</span>)</span><br><span class=line>group.add_option(<span class=string>-t</span>,action=<span class=string>store</span>,help=<span class=string>Group options</span>)</span><br><span class=line>parser.add_option_group(group)</span><br></pre></td></tr></table></figure> <h2 id=处理异常><a href=#处理异常 class=headerlink title=处理异常:></a><strong>处理异常:</strong></h2><blockquote> <p>指因用户输入无效的、不完整的命令行参数而引发的异常.</p> </blockquote> <figure class=highlight python><table><tr><td class=gutter><pre><span class=line>1</span><br><span class=line>2</span><br><span class=line>3</span><br><span class=line>4</span><br></pre></td><td class=code><pre><span class=line>[-]</span><br><span class=line>(options, args) = parser.parse_args() </span><br><span class=line><span class=keyword>if</span> options.a <span class=keyword>and</span> options.b:</span><br><span class=line> parser.error(<span class=string>options -a and -b invalid</span>)</span><br></pre></td></tr></table></figure> <p>完整的程序例子</p> <figure class=highlight python><table><tr><td class=gutter><pre><span class=line>1</span><br><span class=line>2</span><br><span class=line>3</span><br><span class=line>4</span><br><span class=line>5</span><br><span class=line>6</span><br><span class=line>7</span><br><span class=line>8</span><br><span class=line>9</span><br><span class=line>10</span><br><span class=line>11</span><br><span class=line>12</span><br><span class=line>13</span><br><span class=line>14</span><br><span class=line>15</span><br><span class=line>16</span><br></pre></td><td class=code><pre><span class=line><span class=comment>#! python2</span></span><br><span class=line><span class=comment># coding: utf-8</span></span><br><span class=line><span class=keyword>from</span> optparse <span class=keyword>import</span> OptionParser</span><br><span class=line><span class=keyword>from</span> optparse <span class=keyword>import</span> OptionGroup</span><br><span class=line><span class=function><span class=keyword>def</span> <span class=title>main</span><span class=params>()</span>:</span></span><br><span class=line> parser = OptionParser(usage=<span class=string>usage: %prog -t theme</span>,version=<span class=string>%prog 1.0</span>)</span><br><span class=line> parser.add_option(<span class=string>-v</span>, action=<span class=string>store_true</span>, dest=<span class=string>m_version</span>)</span><br><span class=line> group = OptionGroup(parser, <span class=string>Custom Group Options</span>, </span><br><span class=line> <span class=string>Custom Group show message</span></span><br><span class=line> <span class=string>use Custom Group</span>)</span><br><span class=line> group.add_option(<span class=string>-t</span>,action=<span class=string>store</span>,help=<span class=string>Group options</span>)</span><br><span class=line> parser.add_option_group(group)</span><br><span class=line> (options, args) = parser.parse_args()</span><br><span class=line> <span class=keyword>if</span> options.m_version:</span><br><span class=line> parser.error(<span class=string>options m_version invalid</span>)</span><br><span class=line> <span class=comment># ...</span></span><br></pre></td></tr></table></figure>">]]></content>
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> optionParser </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>git命令的记录</title>
      <link href="//posts/82a402af/"/>
      <url>//posts/82a402af/</url>
      <content type="html"><![CDATA[<p>现在对git也使用快一年了现在总结一下常用的一些命令。</p><h3 id="本文的大纲"><a href="#本文的大纲" class="headerlink" title="本文的大纲"></a><strong>本文的大纲</strong></h3><p>对以下命令做一些记录<br>1.git clone<br>2.git pull<br>3.git commit<br><a id="more"></a><br>4.git push<br>5.git branch<br>6.git remote<br>7.git checkout<br>8.git reset<br>9.git stash<br>10.git配置一些外部工具<br>11.git merge</p><h2 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a><strong>git clone</strong></h2><pre><code>git clone 是克隆别的仓库</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone &lt;repo&gt; &lt;directory&gt;</span><br><span class="line">参数说明：</span><br><span class="line">    repo:Git 仓库</span><br><span class="line">    directory:本地目录</span><br></pre></td></tr></table></figure><pre><code>ej:比如，要克隆 Ruby 语言的 Git 代码仓库 Grit，可以用下面的命令：git clone git://github.com/schacon/grit.git或者是这样的git clone git://github.com/schacon/grit.git test这个就会克隆到 ../test 和目录</code></pre><h2 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a><strong>git pull</strong></h2><pre><code>拉取别人在远程仓库更新的内容 默认是远程的 origin 分支</code></pre><h2 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a><strong>git add</strong></h2><pre><code>将本地的改变提交到缓存区</code></pre><p><strong>git add -u</strong></p><blockquote><p>是将本地追踪的文件提交到缓存区</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ej:</span><br><span class="line">git add -u *.png</span><br><span class="line">--添加所有追踪的文件提交到缓存区 前提是以.png 为结尾的文件</span><br></pre></td></tr></table></figure><p><strong>git add -A</strong></p><blockquote><p>是将本地未追踪的文件提交到缓存区</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ej:</span><br><span class="line">git add -A .</span><br><span class="line">--添加所有的未追踪的文件提交到缓存区</span><br></pre></td></tr></table></figure><h2 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a><strong>git commit</strong></h2><blockquote><p>将本地的改变提交到缓存区的内容到本地版本库</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ej:</span><br><span class="line">git commit -m &quot;test&quot;</span><br><span class="line">-- -m 是对此次的提交内容的描述(desc)</span><br></pre></td></tr></table></figure><h2 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a><strong>git push</strong></h2><blockquote><p>将本地的改变提交到本地版本库的内容推送到远程版本库</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ej:</span><br><span class="line">git push</span><br><span class="line">-- 默认是主为分支(origin)</span><br></pre></td></tr></table></figure><blockquote><p>git push 将本地分支推送到云端</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin/远程分支的名字 本地分支的名字</span><br></pre></td></tr></table></figure><h2 id="git-branch"><a href="#git-branch" class="headerlink" title="git branch"></a><strong>git branch</strong></h2><blockquote><p>有关分支的一些使用</p></blockquote><p><strong>git branch</strong></p><blockquote><p>查看本地分支</p></blockquote><p><strong>git branch -vv</strong></p><blockquote><p>查看本地分支 与 远程分支的映射关系</p></blockquote><p><strong>git branch -a</strong></p><blockquote><p>查看 本地和远程分支</p></blockquote><p><strong>git branch -r</strong></p><blockquote><p>查看远程分支</p></blockquote><p><strong>git branch xx</strong></p><blockquote><p>创建新的xx分支</p></blockquote><p><strong>git branch -D xx</strong></p><blockquote><p>删除xx分支</p></blockquote><h2 id="git-branch-upstream-git-分支的映射关系"><a href="#git-branch-upstream-git-分支的映射关系" class="headerlink" title="git branch upstream(git 分支的映射关系)"></a><strong>git branch upstream(git 分支的映射关系)</strong></h2><pre><code>建立本地分支与远程分支的映射关系（或者为跟踪关系track）。这样使用`git pull`或者`git push`时就不必每次都要指定从远程的哪个分支拉取合并和推送到远程的哪个分支了。</code></pre><p>ej:<br><img src="/posts/82a402af/git_branch_vv.png" title="git branch -vv"><br>从这上面可以看到本地分支与远程分支的映射关系<br>若没有映射关系 <code>git pull 或是 git push</code> 会失败</p><p><strong>与远程分支建立映射关系</strong></p><p>使用 <code>git branch -u origin/xx</code> 与远程分支 建立 映射关系<br>xx 为 远程分支的名字</p><p><strong>与远程分支取消映射关系</strong><br>使用 <code>git branch --unset-upstream</code></p><blockquote><p>补充：不同名字客之间也是可以建立映射关系的</p></blockquote><p><strong>删除远程的分支</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git push origin --delete xxx</span><br><span class="line">-- xxx 为远程分支的名字</span><br></pre></td></tr></table></figure></p><h2 id="git-fetch"><a href="#git-fetch" class="headerlink" title="git fetch"></a><strong>git fetch</strong></h2><blockquote><p>来一个关系式 <code>git pull = git fecth + git merge</code><br>拉取别人远程仓库的内容到自己本地的一个分支上</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ej:</span><br><span class="line">    git fecth origin test:temp</span><br><span class="line">    -- 拉取远程分支 test 到 本地 temp 分支上</span><br><span class="line">    -- 注意这种拉取 本地分支和远程分支 是没有映射关系的</span><br></pre></td></tr></table></figure><h2 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a><strong>git remote</strong></h2><p><strong>git remote and git remote -v</strong></p><blockquote><p>git remote用来管理本地工作目录对应的远程代码仓库，在一般的工作目录下，执行git remote结果如下：<br><img src="/posts/82a402af/git_remote_v.png" title="git remote -v"></p></blockquote><p><strong>git remote add</strong></p><blockquote><p>我们可以使用git remote add命令来增加一个远程仓库，这个远程仓库可以是ssh地址（如上面这种），可以是本地目录，也可以是git协议或者http协议的地址。 例如，我要把liming的仓库作为我的远程仓库之一，可以执行git remote add 来增加仓库，例如：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add liming /home/liming/repo</span><br><span class="line">$ git remote</span><br><span class="line">liming</span><br><span class="line">origin</span><br><span class="line">$ git remote -v</span><br><span class="line">liming  /home/liming/repo (fetch)</span><br><span class="line">liming  /home/liming/repo (push)</span><br><span class="line">origin  git@remoteRepo (fetch)</span><br><span class="line">origin  git@remoteRepo (push)</span><br></pre></td></tr></table></figure><blockquote><p>相应的，可以使用git remote rm或者git remote rename对远程代码仓库的名称进行修改（本地的，不会影响到对方的目录）</p></blockquote><h2 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git checkout"></a><strong>git checkout</strong></h2><pre><code>作用：1.切换分支2.放弃对某个文件的修改3.创建新的分支</code></pre><p><strong>git checkout xx</strong></p><blockquote><p>切换到xx分支</p></blockquote><p><strong>git checkout -b xx</strong></p><blockquote><p>在没有的时候 创建的新的分支xx 并跳转到 xx 分支上</p></blockquote><p><strong>git checkout xx.ext</strong></p><blockquote><p>放弃修改直接还原和版本库保持一致</p></blockquote><p><strong>拉取远程方法</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b 本地分支名x origin/远程分支名x</span><br><span class="line">Note:使用该方式会在本地新建分支x，并自动切换到该本地分支x。</span><br><span class="line">     采用此种方法建立的本地分支会和远程分支建立映射关系。</span><br></pre></td></tr></table></figure></p><h2 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a><strong>git reset</strong></h2><pre><code>作用：1.文件从暂存区回退到工作区2.版本回退</code></pre><p>作用1：<br>    git reset HEAD filename(xx)<br>作用2:<br>    我就直接转载一篇文章写的挺好的<br>    <a href="http://blog.csdn.net/hbwindy/article/details/51519999">git reset的使用</a></p><p><a href="https://git-scm.com/book/zh/v2">git 中文的教程</a> –貌似要科学上网</p><h2 id="git-stash"><a href="#git-stash" class="headerlink" title="git stash"></a><strong>git stash</strong></h2><p>你当前正在开发的分支上面，还有未提交的代码，你又不想把代码提交了，怎么办呢？<br>作用：<br>    将本地的改变存储起来，切换到另外的分支上。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git stash</span><br><span class="line">-- 将本地的改变存储起来</span><br><span class="line">git stash list</span><br><span class="line">-- 查看本地存储的列表</span><br></pre></td></tr></table></figure><p><strong>如何恢复工作现场呢？</strong></p><pre><code>第一种方案，用`git stash apply`恢复，但是恢复后，stash内容不删除，需要用`git stash drop`来删除第二种方案，用`git stash pop`,恢复的同时把stash内容也删除了。</code></pre><h2 id="git配置一些外部工具"><a href="#git配置一些外部工具" class="headerlink" title="git配置一些外部工具"></a><strong>git配置一些外部工具</strong></h2><h3 id="配置代码对比工具"><a href="#配置代码对比工具" class="headerlink" title="配置代码对比工具"></a>配置代码对比工具</h3><pre><code>我配置了一个叫diffuse的工具我这里给你提供一个下载地址，当然你也可以自己去下载别的</code></pre><p><a href="http://www.skycn.com/soft/appid/11557.html">download diffuse</a></p><ul><li><p>1.git查看有哪些对比工具可以设置命令：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git difftool --tool-help</span><br></pre></td></tr></table></figure></li><li><p>2.然后再设置对比工具，如：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global diff.tool diffuse</span><br><span class="line">git config --global difftool.diffuse.path &quot;E:\Program Files (x86)\Diffuse\diffuse.exe&quot;</span><br></pre></td></tr></table></figure></li><li><p>3.设置好后，使用命令是 <code>git difftool</code> 而不是之前的 <code>git diff</code> 了</p></li></ul><h2 id="git-Problem"><a href="#git-Problem" class="headerlink" title="git Problem"></a><strong>git Problem</strong></h2><p>Problem :<br>    1.为什么在切换分支的时,会出现有时要你提交本地的改变才可以切换，有的时候却不需要？</p><p><code>出现融合的时候是你当前分支改变的内容与你将要切换分支的内容有冲突，这个时候不知要你融合。</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">解决的方法有我种：</span><br><span class="line">    1.使用 git stash 保存当前的改变   git stash 的用法在上面</span><br><span class="line">    2.使用 git merge  融合要切换的分支到当前的分支</span><br><span class="line">    3.使用 git checkout 还原当前冲突的文件</span><br></pre></td></tr></table></figure><h2 id="git-merge"><a href="#git-merge" class="headerlink" title="git merge"></a><strong>git merge</strong></h2><p>– 2018年3月20日14:36:34<br>git 融合：是融合你当前版本库没有的东西。<br>你可以选择本地的分支也可以是远程的分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- 融合远程分支</span><br><span class="line">ej:</span><br><span class="line">    git merge origin/分支的名字</span><br><span class="line">-- 融合本地分支</span><br><span class="line">ej:</span><br><span class="line">    git merge 分支的名字</span><br></pre></td></tr></table></figure><h2 id="git-更高级的用法"><a href="#git-更高级的用法" class="headerlink" title="git 更高级的用法"></a><strong>git 更高级的用法</strong></h2><p>问题: 在你的使用 git merge 的时候也会出现冲突.</p><h2 id="git-merge-–abort"><a href="#git-merge-–abort" class="headerlink" title="git merge –abort"></a><strong>git merge –abort</strong></h2><p>选项会尝试恢复到你运行合并前的状态。 但当运行命令前，在工作目录中有未储藏、未提交的修改时它不能完美处理，除此之外它都工作地很好</p><h2 id="git-status-sb"><a href="#git-status-sb" class="headerlink" title="git status -sb"></a><strong>git status -sb</strong></h2><p>罗列出需要解决冲突的文件.</p><p>在你合并的时候 你可以将远端共同祖先的文件, 自己本地的文件, 要融合分支的文件,都下载到本地,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git show :1:hello.rb &gt; hello.common.rb</span><br><span class="line">git show :2:hello.rb &gt; hello.ours.rb</span><br><span class="line">git show :3:hello.rb &gt; hello.theirs.rb</span><br></pre></td></tr></table></figure><h2 id="git-clean-f"><a href="#git-clean-f" class="headerlink" title="git clean -f"></a><strong>git clean -f</strong></h2><p>在这时我们可以使用 git clean 命令来清理我们为手动合并而创建但不再有用的额外文件。<br>就是通过上面的命令 git  show :1 …  这个命令产出的文件.</p><!-- 这里面会记录我使用不知过程中的问题[git 问题总结](http://leng521.top/2018/03/07/git%E5%91%BD%E4%BB%A4%E7%9A%84%E8%AE%B0%E5%BD%95/) -->]]></content>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>优化cocos2dxSpine库</title>
      <link href="//posts/c4c0a180/"/>
      <url>//posts/c4c0a180/</url>
      <content type="html"><![CDATA[<h1 id="对cocos2dxSpine库的升级和优化"><a href="#对cocos2dxSpine库的升级和优化" class="headerlink" title="对cocos2dxSpine库的升级和优化"></a><strong>对cocos2dxSpine库的升级和优化</strong></h1><h3 id="本文的大纲"><a href="#本文的大纲" class="headerlink" title="本文的大纲"></a><strong>本文的大纲</strong></h3><p>1.升级spine在cocos2dx-3.15的运行时库<br>2.优化spine在创建的时候效率</p><p>在开发的时候出现的问题<br>1.spine这个软件导出3.6新加的特效在cocos2dx3.15 不能使用<br>2.spine在批量创建的时候帧数会下降<br><a id="more"></a></p><h3 id="升级spine-gt-3-6"><a href="#升级spine-gt-3-6" class="headerlink" title="升级spine -&gt;3.6"></a><strong>升级spine -&gt;3.6</strong></h3><p><a href="https://github.com/EsotericSoftware/spine-runtimes">spine code github 地址</a><br>去这个地址clone或者是下载Zip这个你随便<br>然后会产现这个目录<br><!-- ![]() --><br><img src="/posts/c4c0a180/spine-code_1.png" title="spine的目录"><br>主要就是我使用箭头标记的这两个目录</p><pre><code>spine-c/spine-c/include/spine/*.hspine-c/spine-c/src/spine/*.cspine-cocos2dx/src/spine/*.cpp  and  spine-cocos2dx/src/spine/*.h</code></pre><p>找到自己的工程的根目录 然后去找这个目录<br>全部放在 <code>···/frameworks/cocos2d-x/cocos/editor-support/spine</code></p><p>直接全部替换<br>然后打开自己的VS去编译记住一点将你添加的C或C++的文件给添加到libSpine的工程中的源文件中</p><img src="/posts/c4c0a180/libSpine_1.png" title="添加到libSpine的工程中去"><p>选中 Source Files 执行 <code>Shift + Alt + A</code> 添加现有项  或者是鼠标右键添加好可以</p><p>然后编译,你会惊奇的发现编译成功了,但是不要高兴的太早了,因为这个在编译Android的时候会报错,当然原因也很简单，接着往下面看。</p><p><strong>在Android中的实现</strong><br>你找到 这个目录里面会有 <code>···/frameworks/cocos2d-x/cocos/editor-support/spine</code><br><code>Android.mk</code>的文件<br>将你添加的写在这个配置里面 注意只写 *.h 的文件<br>然后使用 Android Studio 编译 Apk, 这里你也可以使用NDK编译,但是在Android2.？这个不记得了,就已经不在支持NDK编译了<br>所以还是使用Android Studio 吧</p><p>在 ios 中的实现也是同样如此，这里就不再讲述了</p><h3 id="优化spine在创建的时候效率"><a href="#优化spine在创建的时候效率" class="headerlink" title="优化spine在创建的时候效率"></a><strong>优化spine在创建的时候效率</strong></h3><p>在原先的 spine 创建的时候每次都需要解析数据,生成骷髅数据,其实这个是很消耗CPU的,导致FPS下降。<br>我的做法是保留 spine create 的原有接口,自己再从新写一个新的接口。<br>原理：创建字典<map>保留骷髅数据每次创建的时候询问这个 Map 是否存在 key 没有创建,有直接使用。</p><p>代码的写法有很多种,我这只是参考</p><p>在SkeletonAnimation.cpp 中添加如下代码<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">SkeletonAnimation* SkeletonAnimation::createFromCache(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; key_skeletonData)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (spSkeletonData* skeleton_data = SkeletonAnimation::getSkeletonDataFromCache(key_skeletonData))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> SkeletonAnimation::createWithData(skeleton_data, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        skeleton_data = SkeletonAnimation::loadSkeletonDataToCache(key_skeletonData, key_skeletonData + <span class="string">".json"</span>, key_skeletonData + <span class="string">".atlas"</span>);</span><br><span class="line">        <span class="keyword">if</span> (skeleton_data) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> SkeletonAnimation::createWithData(skeleton_data, <span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line">spSkeletonData* SkeletonAnimation::loadSkeletonDataToCache(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; key_skeletonData, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; skeletonJsonFile, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; atlasFile, <span class="keyword">float</span> scale)</span><br><span class="line">&#123;</span><br><span class="line">    iteratorSkeletonData it = _allSkeletonDataCache.find(key_skeletonData);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (it == _allSkeletonDataCache.end())</span><br><span class="line">    &#123;</span><br><span class="line">        SkeletonDataInCache skeleton_data_in_cache;</span><br><span class="line">        spAtlas* atlas = <span class="literal">nullptr</span>;</span><br><span class="line">        spAttachmentLoader* attachmentLoader = <span class="literal">nullptr</span>;</span><br><span class="line">        skeleton_data_in_cache._skeleton_data = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">        atlas = spAtlas_createFromFile(atlasFile.c_str(), <span class="number">0</span>);</span><br><span class="line">        CCASSERT(atlas, <span class="string">"loadSkeletonDataToCache Error  atlas file."</span>);</span><br><span class="line"></span><br><span class="line">        attachmentLoader = SUPER(Cocos2dAttachmentLoader_create(atlas));</span><br><span class="line"></span><br><span class="line">        spSkeletonJson* json = spSkeletonJson_createWithLoader(attachmentLoader);</span><br><span class="line">        json-&gt;scale = scale;</span><br><span class="line">        skeleton_data_in_cache._skeleton_data = spSkeletonJson_readSkeletonDataFile(json, skeletonJsonFile.c_str());</span><br><span class="line">        CCASSERT(skeleton_data_in_cache._skeleton_data, json-&gt;error ? json-&gt;error : <span class="string">"loadSkeletonDataToCache Error reading skeleton data file."</span>);</span><br><span class="line">        spSkeletonJson_dispose(json);</span><br><span class="line">        spAtlas_dispose(atlas);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (skeleton_data_in_cache._skeleton_data)</span><br><span class="line">        &#123;</span><br><span class="line">            _allSkeletonDataCache[key_skeletonData] = skeleton_data_in_cache;</span><br><span class="line">            <span class="keyword">return</span> skeleton_data_in_cache._skeleton_data;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//error release</span></span><br><span class="line">            <span class="keyword">if</span> (skeleton_data_in_cache._skeleton_data)</span><br><span class="line">            &#123;</span><br><span class="line">                spSkeletonData_dispose(skeleton_data_in_cache._skeleton_data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line">spSkeletonData* SkeletonAnimation::getSkeletonDataFromCache(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; key_skeletonData)</span><br><span class="line">&#123;</span><br><span class="line">    iteratorSkeletonData it = _allSkeletonDataCache.find(key_skeletonData);</span><br><span class="line">    <span class="keyword">if</span> (it != _allSkeletonDataCache.end())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> it-&gt;second._skeleton_data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> SkeletonAnimation::removeSkeletonData(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; key_skeletonData)</span><br><span class="line">&#123;</span><br><span class="line">    iteratorSkeletonData it = _allSkeletonDataCache.find(key_skeletonData);</span><br><span class="line">    <span class="keyword">if</span> (it != _allSkeletonDataCache.end()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (it-&gt;second._skeleton_data) spSkeletonData_dispose(it-&gt;second._skeleton_data);</span><br><span class="line"></span><br><span class="line">        _allSkeletonDataCache.erase(it);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> SkeletonAnimation::removeAllSkeletonData()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (iteratorSkeletonData it = _allSkeletonDataCache.begin(); it != _allSkeletonDataCache.end(); ++it) &#123;</span><br><span class="line">        <span class="keyword">if</span> (it-&gt;second._skeleton_data) spSkeletonData_dispose(it-&gt;second._skeleton_data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    _allSkeletonDataCache.clear();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> SkeletonAnimation::isExistSkeletonDataInCache(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; key_skeletonData)</span><br><span class="line">&#123;</span><br><span class="line">    iteratorSkeletonData it = _allSkeletonDataCache.find(key_skeletonData);</span><br><span class="line">    <span class="keyword">if</span> (it != _allSkeletonDataCache.end()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//end</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>, SkeletonAnimation::SkeletonDataInCache&gt; SkeletonAnimation::_allSkeletonDataCache;</span><br></pre></td></tr></table></figure></p><p>在 SkeletonAnimation.h 中添加如下代码<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> SkeletonAnimation* <span class="title">createFromCache</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; key_skeletonData)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> spSkeletonData* <span class="title">loadSkeletonDataToCache</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; key_skeletonData, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; skeletonJsonFile, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; atlasFile, <span class="keyword">float</span> scale = <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> spSkeletonData* <span class="title">getSkeletonDataFromCache</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; key_skeletonData)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">removeSkeletonData</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; key_skeletonData)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">removeAllSkeletonData</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">isExistSkeletonDataInCache</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; skeletonDataKeyName)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">SkeletonDataInCache</span> &#123;</span></span><br><span class="line">        spSkeletonData* _skeleton_data; </span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>, SkeletonDataInCache&gt;::iterator iteratorSkeletonData;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>, SkeletonDataInCache&gt; _allSkeletonDataCache;</span><br><span class="line">    <span class="comment">//end</span></span><br></pre></td></tr></table></figure></p><h3 id="Binding-to-lua"><a href="#Binding-to-lua" class="headerlink" title="Binding to lua"></a><strong>Binding to lua</strong></h3><p>既然写了这么多了,就要将这些代码绑定到lua中去</p><p>找到自己工程的的libluacocos2d的工程<br><img src="/posts/c4c0a180/auto_binding_2_lua_1.png" title="绑定C++到lua"><br>这里你可以自己写代码在 <code>lua_cocos2dx_spine_auto.cpp</code> 中,但是这不是一个程序员应该做的。<br>第二种做是:既然它的文件名有 <code>auto</code> 这个单词,一看就不是人写出来的,OK,去寻找答案。</p><p>到这个目录中去 <code>···/frameworks/cocos2d-x/tools/tolua/</code> 你会发现有一个<code>genbindings.py</code>的文件<br>你一运行可能报错,你去读他的 <code>README.md</code> ,发现他要你装一些python的库,那就按照说的安装吧<br>你可以 pip 命令也可以 自己下载zip 这个随意。<br>然后就是配置NDK,这个下载解压,配置 path 就完了,我就不多说了。</p><p>然后你运行可能还会报错</p><p>那就打开 <code>genbindings.py</code> 你会发现他需要的是NDK <strong>3.3-3.4</strong> 然而自己的NDK经过查看 是 <strong>3.5-3.6</strong> 没关系,把它这个所有相关 <strong>3.3  3.4</strong> 全部改成 <strong>3.5-3.6</strong>的就OK了。</p><p>改完后运行 Prefect ^-^.</p><h3 id="在lua中调用"><a href="#在lua中调用" class="headerlink" title="在lua中调用"></a><strong>在lua中调用</strong></h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sp.SkeletonAnimation: createFromCache(key)</span><br><span class="line">sp.SkeletonAnimation: isExistSkeletonDataInCache(key)</span><br><span class="line">sp.SkeletonAnimation: loadSkeletonDataToCache(key,jsonFilePath,atlasFilePath,scale =<span class="number">1</span>)      </span><br><span class="line">sp.SkeletonAnimation: getSkeletonDataFromCache(key)</span><br><span class="line">sp.SkeletonAnimation: removeSkeletonData(key)</span><br><span class="line">sp.SkeletonAnimation: removeAllSkeletonData()</span><br></pre></td></tr></table></figure><p>这里面有一个问题是你会发现返回的<code>骨胳数据</code>拿不到,这个是cocos2dx在绑定的时候并没有将这个数据类型绑定lua去,我上面那么写就是为了以后留个接口,当然你也可以自己把那个返回值去掉。</p><p>好了今天就到这吧。</p>]]></content>
      
      
        <tags>
            
            <tag> cocos2dx </tag>
            
            <tag> spine </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Using-Hexo</title>
      <link href="//posts/6743743b/"/>
      <url>//posts/6743743b/</url>
      <content type="html"><![CDATA[<p>这篇文章只是我对 hexo 的一些功能的测试吧，可能后会常用到这些东西</p><h2 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h2><h2 id="install-Hexo"><a href="#install-Hexo" class="headerlink" title="install Hexo"></a>install Hexo</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% blockquote [author[, source]] [link] [source_link_title] %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><blockquote><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.</p></blockquote><blockquote><p>Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</p><footer><strong>David Levithan</strong><cite>-Wide Awake</cite></footer></blockquote><blockquote><p>NEW: DevDocs now comes with syntax highlighting. <a href="http://devdocs.io">http://devdocs.io</a></p><footer><strong>@DevDocs</strong><cite><a href="https://twitter.com/devdocs/status/356095192085962752">twitter.com/devdocs/status/356095192085962752</a></cite></footer></blockquote><blockquote><p>Every interaction is both precious and an opportunity to delight.</p><footer><strong>Seth Godin</strong><cite><a href="http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html">Welcome to Island Marketing</a></cite></footer></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock [title] [lang:language] [url] [link text] %&#125;</span><br><span class="line">code snippet</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alert(&apos;Hello World!&apos;);</span><br><span class="line">print(&apos;Hello World!&apos;)</span><br></pre></td></tr></table></figure><p>language -&gt; OC<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[rectangle setX: <span class="number">10</span> y: <span class="number">10</span> width: <span class="number">20</span> height: <span class="number">20</span>];</span><br></pre></td></tr></table></figure></p><p>language -&gt; python<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print('Hello World!')</span><br></pre></td></tr></table></figure></p><h3 id="附加说明"><a href="#附加说明" class="headerlink" title="附加说明"></a><strong>附加说明</strong></h3><figure class="highlight plain"><figcaption><span>Array.map</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.map(callback[, thisArg])</span><br></pre></td></tr></table></figure><h3 id="附加说明和网址"><a href="#附加说明和网址" class="headerlink" title="附加说明和网址"></a><strong>附加说明和网址</strong></h3><figure class="highlight plain"><figcaption><span>_.compact</span><a href="http://underscorejs.org/#compact">Underscore.js</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">_.compact([0, 1, false, 2, &apos;&apos;, 3]);</span><br><span class="line">=&gt; [1, 2, 3]</span><br></pre></td></tr></table></figure><h3 id="反引号代码块"><a href="#反引号代码块" class="headerlink" title="反引号代码块"></a><strong>反引号代码块</strong></h3><p><code>[language] [title] [url] [link text] code snippet</code></p><p>language - &gt;OC<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[rectangle setX: <span class="number">10</span> y: <span class="number">10</span> width: <span class="number">20</span> height: <span class="number">20</span>];</span><br></pre></td></tr></table></figure></p><h3 id="插入Image图片"><a href="#插入Image图片" class="headerlink" title="插入Image图片"></a><strong>插入Image图片</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% img [class names] /path/to/image [width] [height] [title text [alt text]] %&#125;</span><br><span class="line">&#123;% asset_img fileName.* title&#125;</span><br></pre></td></tr></table></figure><img src="/posts/6743743b/1.jpg" title="wolf">/posts/6743743b/test.lua<a href="/posts/6743743b/test.lua" title="test.lua">test.lua</a><h3 id="引用文章"><a href="#引用文章" class="headerlink" title="引用文章"></a><strong>引用文章</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% post_path slug %&#125;</span><br><span class="line">&#123;% post_link slug [title] %&#125;</span><br></pre></td></tr></table></figure><h3 id="使用iframe"><a href="#使用iframe" class="headerlink" title="使用iframe"></a><strong>使用iframe</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% iframe url [width] [height] %&#125;</span><br></pre></td></tr></table></figure><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=515143440&auto=0&height=66"></iframe><!-- <iframe src="//music.163.com/outchain/player?type=2&id=515143440&auto=0&height=66" width="330" height="90" frameborder="0" allowfullscreen></iframe> –&gt;<!-- <img src="/path/to/image" class="[class names]" title="[width] [height] [title text [alt text]]"><p><img class="} –&gt;</p>">]]></content>
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> IT </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="//posts/4a17b156/"/>
      <url>//posts/4a17b156/</url>
      <content type="html"><![CDATA[<h2 id="搭建自己的博客在github-page"><a href="#搭建自己的博客在github-page" class="headerlink" title="搭建自己的博客在github page"></a>搭建自己的博客在github page</h2><p>经过2天的折腾的终于把自己的博客给搭建出来了,也可以说是自己的一个<code>Hello World</code> 吧<br><a id="more"></a><br>这个主题是使用<strong>Litten</strong>的theme通过hexo搭建</p><h2 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a><strong>准备环境</strong></h2><pre><code>* install git   * install node* 注册github的账号</code></pre><p><a href="https://git-scm.com/downloads">Git Download</a><br><a href="http://nodejs.cn/download/">nodejs Download</a><br><a href="https://github.com/">github 注册的地址</a></p><h2 id="再创建之前思考一个事情"><a href="#再创建之前思考一个事情" class="headerlink" title="再创建之前思考一个事情"></a><strong>再创建之前思考一个事情</strong></h2><p>就是在你做完这些之后，你开始写自己的博客的时候，突然之间要换电脑了，这个时候你要怎么办<br>这个思考是对于那些使用过 github 或者是使用过别的版本控制的工具。 </p><h2 id="Build-to-blog"><a href="#Build-to-blog" class="headerlink" title="Build to blog"></a><strong>Build to blog</strong></h2><pre><code>安装 nodejs 很简单,就是傻瓜式的安装。在安装 git 的时候也是一键式安装。然后自己注册github的账号。</code></pre><p>记得配置自己的 <code>nodejs的Path</code></p><p>在 cmd 窗口 输入 path<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/assets/hello-world/path_1.png" alt="path" title="">                </div>                <div class="image-caption">path</div>            </figure><br>我自己的 <code>nodejs</code> 在E盘</p><p>同样看看自己的 git 的 path 有没有配置</p><p>然后就是验证你的安装是否正确打开你 cmd 输入 git<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/assets/hello-world/git_1.png" alt="git" title="">                </div>                <div class="image-caption">git</div>            </figure><br>输入 node -v<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/assets/hello-world/node_1.png" alt="node -v" title="">                </div>                <div class="image-caption">node -v</div>            </figure><br>github 就不用验证了吧</p><p>然后就是利用 node 的 npm 工具去安装 hexo 输入 </p><pre><code>npm install -g hexo-cli</code></pre><p>如果自己的 hexo 安装成功的话</p><p>在 cmd 中 输入 hexo -v<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/assets/hello-world/hexo_1.png" alt="hexo -v" title="">                </div>                <div class="image-caption">hexo -v</div>            </figure></p><h2 id="创建自己的-hexo-工程"><a href="#创建自己的-hexo-工程" class="headerlink" title="创建自己的 hexo 工程"></a><strong>创建自己的 hexo 工程</strong></h2><p>假设自己的 hexo 的工程目录是在 D:\Pro\pro_wdh\nodejs</p><pre><code>1. 在 cmd 中 输入 pushd D:\Pro\pro_wdh\nodejs2. cmd的当前目录直接跳转到 D:\Pro\pro_wdh\nodejs3. 使用 hexo init 命令 初始化  （）hexo init [folderName] ）</code></pre><blockquote><p>hexo init hexo<br>cd hexo<br>nmp install</p></blockquote><p>完成之后目录结构如下：</p><pre><code>.├── _config.yml├── package.json├── scaffolds├── source|   ├── _drafts|   └── _posts└── themes</code></pre><h3 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a><strong>_config.yml</strong></h3><p>网站的 配置 信息，您可以在此配置大部分的参数。</p><h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a><strong>package.json</strong></h3><p>应用程序的信息。EJS, Stylus 和 Markdown renderer 已默认安装，您可以自由移除。</p><h3 id="scaffolds"><a href="#scaffolds" class="headerlink" title="scaffolds"></a><strong>scaffolds</strong></h3><p>模版 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。</p><p>Hexo的模板是指在新建的markdown文件中默认填充的内容。例如，如果您修改scaffold/post.md中的Front-matter内容，那么每次新建一篇文章时都会包含这个修改。</p><h3 id="source"><a href="#source" class="headerlink" title="source"></a><strong>source</strong></h3><p>资源文件夹是存放用户资源的地方。除 <em>posts 文件夹之外，开头命名为 </em> (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。</p><h3 id="themes"><a href="#themes" class="headerlink" title="themes"></a><strong>themes</strong></h3><p>主题 文件夹。Hexo 会根据主题来生成静态页面。</p><h2 id="运行自己的hexo工程"><a href="#运行自己的hexo工程" class="headerlink" title="运行自己的hexo工程"></a><strong>运行自己的hexo工程</strong></h2><p>在 cmd 中 输入 hexo s<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/assets/hello-world/hexo_2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>在自己的浏览器中打开 <code>http://localhost:4000/.</code></p><p>这时你会看到自己的静态网页</p><p><a href="https://segmentfault.com/a/1190000002632530">更多的 hexo的命令</a><br><a href="https://hexo.io/zh-cn/">hexo 的官网</a></p><h2 id="部署自己的笔记2github"><a href="#部署自己的笔记2github" class="headerlink" title="部署自己的笔记2github"></a><strong>部署自己的笔记2github</strong></h2><p>网上的一些教程都是 使用 SSH 去上传自己的博客<br>但是使用 htpp 的方式也同样可以 上传</p><p>创建自己的 github 的仓库<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/assets/hello-world/github_1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>上面的仓库名字就和你 github 的名字一样就行了</p><p>然后就是在 hexo 的根目录下的 _config.yml 中 找到<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/assets/hello-world/config_1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>按照图片上的配置自己的 github 仓库的地址<br>github 仓库的地址在这里拿<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/assets/hello-world/github_2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>然后执行 hexo的命令 在cmd中输入  </p><pre><code>1.hexo clean2.hexo g3.hexo d</code></pre><p>静静的等待</p><p>上传完成之后</p><p>打开 <code>http://Test.github.io</code> 就可以看到自己的博客了</p><h2 id="回答上面的提出的思考"><a href="#回答上面的提出的思考" class="headerlink" title="回答上面的提出的思考"></a><strong>回答上面的提出的思考</strong></h2><p>答案就是 在 github 上创建自己的 branch(分支)</p><p>我是在自己的 github 创建自己的 blog(分支)</p><p><a href="http://note.youdao.com/noteshare?id=7abb057f779aca20328c74a7c810e027&amp;sub=855026A2B8904F61A0933D26CA9E27FF">git 的一些命令</a></p><p>不是太全,但是应对日常还是可以的</p><p>做法如下：</p><pre><code>git chcekout -b bloggit add -Agit commit - m &quot;commit my blog&quot;git push origin blog</code></pre><p>解释一下吧</p><blockquote><p>创建新的分支 blog<br>添加自己的文件到缓存区<br>提交到本地版本库<br>推送到远端</p></blockquote><p><a href="http://www.runoob.com/?s=git">更多 git 的知识</a></p><p>这只是一些基础</p><p>更多需要你多去尝试,多自己动手。</p><p>有疑问可以加QQ一起讨论</p>]]></content>
      
      
        <tags>
            
            <tag> hello world </tag>
            
            <tag> github page </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
